{"ast":null,"code":"var _jsxFileName = \"/Users/aleksander/Documents/Development/GMIxc/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { generateConversation, generateUserQuestionResponse, getAvailableSpeakers, validateGMIConfig, testGMIConnection, testGMIConnectivity, testBasicConnectivity } from './services/gmiService';\nimport { textToSpeech, playAudio, stopAudio, validateElevenLabsConfig } from './services/ttsService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName] = useState('User');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n\n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n      console.log('ElevenLabs API key:', process.env.REACT_APP_ELEVENLABS_API_KEY ? 'Set' : 'Not set');\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n\n      // Add typing delay (1-3 seconds)\n      const typingDelay = 1000 + Math.random() * 2000;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      const response = await generateConversation(currentSpeaker, otherSpeaker, topic, currentMessages);\n      setTypingSpeaker(null);\n\n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n\n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n\n      // Wait for first speaker's audio to finish\n      await playMessageAudio(firstResponse.audioUrl);\n\n      // Add a natural pause between speakers (1-2 seconds)\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n\n      // Second speaker responds (now with context of first speaker's message)\n      const secondResponse = await generateTurn(speaker2, speaker1, [firstResponse]);\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n\n      // Wait for second speaker's audio to finish\n      await playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      for (let i = 2; i < maxTurns; i++) {\n        // Start generating next response immediately\n        const nextMessagePromise = generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n\n        // Wait for current speaker's audio to finish\n        if (initialMessages.length > 0) {\n          await playMessageAudio(initialMessages[initialMessages.length - 1].audioUrl);\n        }\n\n        // Add a natural pause between speakers (1-2 seconds)\n        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n\n        // Get the generated response (should be ready by now)\n        const newMessage = await nextMessagePromise;\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n\n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n      }\n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async question => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userQuestionMessage]);\n    try {\n      setTypingSpeaker(speaker1);\n\n      // Generate responses from both speakers in parallel\n      const responses = await generateUserQuestionResponse(speaker1, speaker2, topic, question, messages);\n\n      // Generate TTS for speaker responses in parallel\n      let speaker1AudioUrl = null;\n      let speaker2AudioUrl = null;\n      if (ttsEnabled) {\n        try {\n          // Generate both audio files in parallel\n          const [speaker1Audio, speaker2Audio] = await Promise.all([textToSpeech(responses.speaker1, speaker1), textToSpeech(responses.speaker2, speaker2)]);\n          speaker1AudioUrl = speaker1Audio;\n          speaker2AudioUrl = speaker2Audio;\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      }\n\n      // Add responses with audio timing\n      setTimeout(async () => {\n        setTypingSpeaker(null);\n        const speaker1Message = {\n          speaker: speaker1,\n          content: responses.speaker1,\n          timestamp: new Date().toISOString(),\n          audioUrl: speaker1AudioUrl\n        };\n        setMessages(prev => [...prev, speaker1Message]);\n\n        // Wait for speaker 1's audio to finish\n        await playMessageAudio(speaker1AudioUrl);\n\n        // Add a natural pause between speakers (1-2 seconds)\n        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n\n        // Then show speaker 2's response\n        setTypingSpeaker(speaker2);\n        setTimeout(async () => {\n          setTypingSpeaker(null);\n          const speaker2Message = {\n            speaker: speaker2,\n            content: responses.speaker2,\n            timestamp: new Date().toISOString(),\n            audioUrl: speaker2AudioUrl\n          };\n          setMessages(prev => [...prev, speaker2Message]);\n\n          // Wait for speaker 2's audio to finish\n          await playMessageAudio(speaker2AudioUrl);\n        }, 500);\n      }, 1500);\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Play audio for a message and return a promise that resolves when audio finishes\n  const playMessageAudio = audioUrl => {\n    return new Promise(resolve => {\n      console.log('playMessageAudio called with:', audioUrl ? 'audio URL' : 'no audio');\n      console.log('TTS enabled:', ttsEnabled);\n      if (audioUrl && ttsEnabled) {\n        // Stop any currently playing audio\n        if (currentAudio) {\n          stopAudio(currentAudio);\n        }\n\n        // Play new audio\n        const audio = playAudio(audioUrl);\n        setCurrentAudio(audio);\n        console.log('Audio playback started:', audio ? 'Yes' : 'No');\n\n        // Resolve when audio finishes\n        if (audio) {\n          audio.onended = () => {\n            console.log('Audio finished playing');\n            setCurrentAudio(null);\n            resolve();\n          };\n          // Fallback in case audio fails to load\n          audio.onerror = () => {\n            console.log('Audio playback failed');\n            setCurrentAudio(null);\n            resolve();\n          };\n        } else {\n          console.log('No audio object created');\n          resolve();\n        }\n      } else {\n        // If no audio, resolve immediately\n        console.log('No audio URL or TTS disabled, resolving immediately');\n        resolve();\n      }\n    });\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n\n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n\n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n\n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bright Minds Discussion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(User, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"User: \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '12px 16px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        border: '1px solid #f5c6cb'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DebateSetup, {\n      speaker1: speaker1,\n      speaker2: speaker2,\n      topic: topic,\n      onSpeaker1Change: setSpeaker1,\n      onSpeaker2Change: setSpeaker2,\n      onTopicChange: setTopic,\n      onStartDebate: handleStartDebate,\n      isLoading: isLoading,\n      availableSpeakers: availableSpeakers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Conversation, {\n      messages: messages,\n      isLoading: isLoading,\n      typingSpeaker: typingSpeaker,\n      speaker1: speaker1,\n      speaker2: speaker2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), isDebateActive && /*#__PURE__*/_jsxDEV(UserQuestionInput, {\n      onAskQuestion: handleUserQuestion,\n      disabled: isLoading || typingSpeaker,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTestAPI,\n        style: {\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: \"Test API Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTtsEnabled(!ttsEnabled),\n        style: {\n          backgroundColor: ttsEnabled ? '#28a745' : '#6c757d',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: ttsEnabled ? '🎤 TTS ON' : '🔇 TTS OFF'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), isDebateActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        style: {\n          backgroundColor: '#6c757d',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem'\n        },\n        children: \"Reset Debate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DVOL/WB59r19Sf7/jpaAR+LrG5A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","User","DebateSetup","Conversation","UserQuestionInput","generateConversation","generateUserQuestionResponse","getAvailableSpeakers","validateGMIConfig","testGMIConnection","testGMIConnectivity","testBasicConnectivity","textToSpeech","playAudio","stopAudio","validateElevenLabsConfig","jsxDEV","_jsxDEV","App","_s","speaker1","setSpeaker1","speaker2","setSpeaker2","topic","setTopic","messages","setMessages","isLoading","setIsLoading","isDebateActive","setIsDebateActive","typingSpeaker","setTypingSpeaker","availableSpeakers","setAvailableSpeakers","userName","error","setError","ttsEnabled","setTtsEnabled","currentAudio","setCurrentAudio","speakers","console","log","process","env","REACT_APP_GMI_API_KEY","REACT_APP_GMI_API_URL","ttsAvailable","REACT_APP_ELEVENLABS_API_KEY","message","generateTurn","currentSpeaker","otherSpeaker","currentMessages","typingDelay","Math","random","Promise","resolve","setTimeout","response","audioUrl","substring","ttsError","speaker","content","timestamp","Date","toISOString","handleStartDebate","trim","initialMessages","firstResponse","push","playMessageAudio","secondResponse","maxTurns","i","nextMessagePromise","length","newMessage","handleUserQuestion","question","userQuestionMessage","type","prev","responses","speaker1AudioUrl","speaker2AudioUrl","speaker1Audio","speaker2Audio","all","speaker1Message","speaker2Message","audio","onended","onerror","handleReset","handleTestAPI","basicConnectivity","connectivitySuccess","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","style","backgroundColor","color","padding","borderRadius","marginBottom","border","onSpeaker1Change","onSpeaker2Change","onTopicChange","onStartDebate","onAskQuestion","disabled","textAlign","marginTop","onClick","cursor","fontSize","marginRight","_c","$RefreshReg$"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { \n  generateConversation, \n  generateUserQuestionResponse, \n  getAvailableSpeakers, \n  validateGMIConfig,\n  testGMIConnection,\n  testGMIConnectivity,\n  testBasicConnectivity\n} from './services/gmiService';\nimport { \n  textToSpeech, \n  playAudio, \n  stopAudio, \n  validateElevenLabsConfig \n} from './services/ttsService';\nimport './App.css';\n\nfunction App() {\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName] = useState('User');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      \n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n      \n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n      console.log('ElevenLabs API key:', process.env.REACT_APP_ELEVENLABS_API_KEY ? 'Set' : 'Not set');\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n      \n      // Add typing delay (1-3 seconds)\n      const typingDelay = 1000 + Math.random() * 2000;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      \n      const response = await generateConversation(\n        currentSpeaker, \n        otherSpeaker, \n        topic, \n        currentMessages\n      );\n      \n      setTypingSpeaker(null);\n      \n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      \n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n      \n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n      \n      // Wait for first speaker's audio to finish\n      await playMessageAudio(firstResponse.audioUrl);\n\n      // Add a natural pause between speakers (1-2 seconds)\n      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n\n      // Second speaker responds (now with context of first speaker's message)\n      const secondResponse = await generateTurn(speaker2, speaker1, [firstResponse]);\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n      \n      // Wait for second speaker's audio to finish\n      await playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      \n      for (let i = 2; i < maxTurns; i++) {\n        // Start generating next response immediately\n        const nextMessagePromise = generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n        \n        // Wait for current speaker's audio to finish\n        if (initialMessages.length > 0) {\n          await playMessageAudio(initialMessages[initialMessages.length - 1].audioUrl);\n        }\n        \n        // Add a natural pause between speakers (1-2 seconds)\n        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n        \n        // Get the generated response (should be ready by now)\n        const newMessage = await nextMessagePromise;\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n        \n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n      }\n      \n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async (question) => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, userQuestionMessage]);\n\n    try {\n      setTypingSpeaker(speaker1);\n      \n      // Generate responses from both speakers in parallel\n      const responses = await generateUserQuestionResponse(\n        speaker1,\n        speaker2,\n        topic,\n        question,\n        messages\n      );\n\n      // Generate TTS for speaker responses in parallel\n      let speaker1AudioUrl = null;\n      let speaker2AudioUrl = null;\n      \n      if (ttsEnabled) {\n        try {\n          // Generate both audio files in parallel\n          const [speaker1Audio, speaker2Audio] = await Promise.all([\n            textToSpeech(responses.speaker1, speaker1),\n            textToSpeech(responses.speaker2, speaker2)\n          ]);\n          speaker1AudioUrl = speaker1Audio;\n          speaker2AudioUrl = speaker2Audio;\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      }\n\n      // Add responses with audio timing\n      setTimeout(async () => {\n        setTypingSpeaker(null);\n        const speaker1Message = {\n          speaker: speaker1,\n          content: responses.speaker1,\n          timestamp: new Date().toISOString(),\n          audioUrl: speaker1AudioUrl\n        };\n        setMessages(prev => [...prev, speaker1Message]);\n        \n        // Wait for speaker 1's audio to finish\n        await playMessageAudio(speaker1AudioUrl);\n        \n        // Add a natural pause between speakers (1-2 seconds)\n        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 1000));\n        \n        // Then show speaker 2's response\n        setTypingSpeaker(speaker2);\n        setTimeout(async () => {\n          setTypingSpeaker(null);\n          const speaker2Message = {\n            speaker: speaker2,\n            content: responses.speaker2,\n            timestamp: new Date().toISOString(),\n            audioUrl: speaker2AudioUrl\n          };\n          setMessages(prev => [...prev, speaker2Message]);\n          \n          // Wait for speaker 2's audio to finish\n          await playMessageAudio(speaker2AudioUrl);\n        }, 500);\n      }, 1500);\n\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Play audio for a message and return a promise that resolves when audio finishes\n  const playMessageAudio = (audioUrl) => {\n    return new Promise((resolve) => {\n      console.log('playMessageAudio called with:', audioUrl ? 'audio URL' : 'no audio');\n      console.log('TTS enabled:', ttsEnabled);\n      \n      if (audioUrl && ttsEnabled) {\n        // Stop any currently playing audio\n        if (currentAudio) {\n          stopAudio(currentAudio);\n        }\n        \n        // Play new audio\n        const audio = playAudio(audioUrl);\n        setCurrentAudio(audio);\n        \n        console.log('Audio playback started:', audio ? 'Yes' : 'No');\n        \n        // Resolve when audio finishes\n        if (audio) {\n          audio.onended = () => {\n            console.log('Audio finished playing');\n            setCurrentAudio(null);\n            resolve();\n          };\n          // Fallback in case audio fails to load\n          audio.onerror = () => {\n            console.log('Audio playback failed');\n            setCurrentAudio(null);\n            resolve();\n          };\n        } else {\n          console.log('No audio object created');\n          resolve();\n        }\n      } else {\n        // If no audio, resolve immediately\n        console.log('No audio URL or TTS disabled, resolving immediately');\n        resolve();\n      }\n    });\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    \n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n      \n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      \n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n      \n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      \n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n      \n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Bright Minds Discussion</h1>\n        <div className=\"user-info\">\n          <User size={16} />\n          <span>User: {userName}</span>\n        </div>\n      </div>\n\n      {error && (\n        <div style={{\n          backgroundColor: '#f8d7da',\n          color: '#721c24',\n          padding: '12px 16px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          border: '1px solid #f5c6cb'\n        }}>\n          {error}\n        </div>\n      )}\n\n      <DebateSetup\n        speaker1={speaker1}\n        speaker2={speaker2}\n        topic={topic}\n        onSpeaker1Change={setSpeaker1}\n        onSpeaker2Change={setSpeaker2}\n        onTopicChange={setTopic}\n        onStartDebate={handleStartDebate}\n        isLoading={isLoading}\n        availableSpeakers={availableSpeakers}\n      />\n\n      <Conversation\n        messages={messages}\n        isLoading={isLoading}\n        typingSpeaker={typingSpeaker}\n        speaker1={speaker1}\n        speaker2={speaker2}\n      />\n\n      {isDebateActive && (\n        <UserQuestionInput\n          onAskQuestion={handleUserQuestion}\n          disabled={isLoading || typingSpeaker}\n          userName={userName}\n        />\n      )}\n\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <button\n          onClick={handleTestAPI}\n          style={{\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          Test API Connection\n        </button>\n        <button\n          onClick={() => setTtsEnabled(!ttsEnabled)}\n          style={{\n            backgroundColor: ttsEnabled ? '#28a745' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          {ttsEnabled ? '🎤 TTS ON' : '🔇 TTS OFF'}\n        </button>\n        {isDebateActive && (\n          <button\n            onClick={handleReset}\n            style={{\n              backgroundColor: '#6c757d',\n              color: 'white',\n              border: 'none',\n              padding: '8px 16px',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '0.9rem'\n            }}\n          >\n            Reset Debate\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}