{"ast":null,"code":"var _jsxFileName = \"/Users/aleksander/Documents/Development/GMIxc/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { generateConversation, generateUserQuestionResponse, getAvailableSpeakers, validateGMIConfig, testGMIConnection, testGMIConnectivity, testBasicConnectivity } from './services/gmiService';\nimport { textToSpeech, playAudio, stopAudio, validateElevenLabsConfig } from './services/ttsService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName] = useState('User');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n\n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n\n      // Add typing delay (1-3 seconds)\n      const typingDelay = 1000 + Math.random() * 2000;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      const response = await generateConversation(currentSpeaker, otherSpeaker, topic, currentMessages);\n      setTypingSpeaker(null);\n\n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          audioUrl = await textToSpeech(response, currentSpeaker);\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      }\n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n\n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n      playMessageAudio(firstResponse.audioUrl);\n\n      // Second speaker responds\n      const secondResponse = await generateTurn(speaker2, speaker1, [firstResponse]);\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n      playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      for (let i = 2; i < maxTurns; i++) {\n        const newMessage = await generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n\n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n\n        // Add delay between turns\n        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));\n      }\n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async question => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userQuestionMessage]);\n    try {\n      setTypingSpeaker(speaker1);\n\n      // Generate responses from both speakers\n      const responses = await generateUserQuestionResponse(speaker1, speaker2, topic, question, messages);\n\n      // Add responses with typing delays\n      setTimeout(() => {\n        setTypingSpeaker(null);\n        setMessages(prev => [...prev, {\n          speaker: speaker1,\n          content: responses.speaker1,\n          timestamp: new Date().toISOString()\n        }]);\n      }, 1500);\n      setTimeout(() => {\n        setTypingSpeaker(speaker2);\n        setTimeout(() => {\n          setTypingSpeaker(null);\n          setMessages(prev => [...prev, {\n            speaker: speaker2,\n            content: responses.speaker2,\n            timestamp: new Date().toISOString()\n          }]);\n        }, 1000 + Math.random() * 1000);\n      }, 2500);\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Play audio for a message\n  const playMessageAudio = audioUrl => {\n    if (audioUrl && ttsEnabled) {\n      // Stop any currently playing audio\n      if (currentAudio) {\n        stopAudio(currentAudio);\n      }\n\n      // Play new audio\n      const audio = playAudio(audioUrl);\n      setCurrentAudio(audio);\n\n      // Clean up audio when it finishes\n      if (audio) {\n        audio.onended = () => {\n          setCurrentAudio(null);\n        };\n      }\n    }\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n\n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n\n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n\n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bright Minds Discussion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(User, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"User: \", userName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '12px 16px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        border: '1px solid #f5c6cb'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DebateSetup, {\n      speaker1: speaker1,\n      speaker2: speaker2,\n      topic: topic,\n      onSpeaker1Change: setSpeaker1,\n      onSpeaker2Change: setSpeaker2,\n      onTopicChange: setTopic,\n      onStartDebate: handleStartDebate,\n      isLoading: isLoading,\n      availableSpeakers: availableSpeakers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Conversation, {\n      messages: messages,\n      isLoading: isLoading,\n      typingSpeaker: typingSpeaker,\n      speaker1: speaker1,\n      speaker2: speaker2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), isDebateActive && /*#__PURE__*/_jsxDEV(UserQuestionInput, {\n      onAskQuestion: handleUserQuestion,\n      disabled: isLoading || typingSpeaker,\n      userName: userName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTestAPI,\n        style: {\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: \"Test API Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), isDebateActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        style: {\n          backgroundColor: '#6c757d',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem'\n        },\n        children: \"Reset Debate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DVOL/WB59r19Sf7/jpaAR+LrG5A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","User","DebateSetup","Conversation","UserQuestionInput","generateConversation","generateUserQuestionResponse","getAvailableSpeakers","validateGMIConfig","testGMIConnection","testGMIConnectivity","testBasicConnectivity","textToSpeech","playAudio","stopAudio","validateElevenLabsConfig","jsxDEV","_jsxDEV","App","_s","speaker1","setSpeaker1","speaker2","setSpeaker2","topic","setTopic","messages","setMessages","isLoading","setIsLoading","isDebateActive","setIsDebateActive","typingSpeaker","setTypingSpeaker","availableSpeakers","setAvailableSpeakers","userName","error","setError","ttsEnabled","setTtsEnabled","currentAudio","setCurrentAudio","speakers","console","log","process","env","REACT_APP_GMI_API_KEY","REACT_APP_GMI_API_URL","ttsAvailable","message","generateTurn","currentSpeaker","otherSpeaker","currentMessages","typingDelay","Math","random","Promise","resolve","setTimeout","response","audioUrl","ttsError","speaker","content","timestamp","Date","toISOString","handleStartDebate","trim","initialMessages","firstResponse","push","playMessageAudio","secondResponse","maxTurns","i","newMessage","handleUserQuestion","question","userQuestionMessage","type","prev","responses","audio","onended","handleReset","handleTestAPI","basicConnectivity","connectivitySuccess","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","style","backgroundColor","color","padding","borderRadius","marginBottom","border","onSpeaker1Change","onSpeaker2Change","onTopicChange","onStartDebate","onAskQuestion","disabled","textAlign","marginTop","onClick","cursor","fontSize","marginRight","_c","$RefreshReg$"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { \n  generateConversation, \n  generateUserQuestionResponse, \n  getAvailableSpeakers, \n  validateGMIConfig,\n  testGMIConnection,\n  testGMIConnectivity,\n  testBasicConnectivity\n} from './services/gmiService';\nimport { \n  textToSpeech, \n  playAudio, \n  stopAudio, \n  validateElevenLabsConfig \n} from './services/ttsService';\nimport './App.css';\n\nfunction App() {\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName] = useState('User');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(false);\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      \n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n      \n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n      \n      // Add typing delay (1-3 seconds)\n      const typingDelay = 1000 + Math.random() * 2000;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      \n      const response = await generateConversation(\n        currentSpeaker, \n        otherSpeaker, \n        topic, \n        currentMessages\n      );\n      \n      setTypingSpeaker(null);\n      \n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          audioUrl = await textToSpeech(response, currentSpeaker);\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      }\n      \n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n      \n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n      playMessageAudio(firstResponse.audioUrl);\n\n      // Second speaker responds\n      const secondResponse = await generateTurn(speaker2, speaker1, [firstResponse]);\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n      playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      \n      for (let i = 2; i < maxTurns; i++) {\n        const newMessage = await generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n        \n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n        \n        // Add delay between turns\n        await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 3000));\n      }\n      \n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async (question) => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, userQuestionMessage]);\n\n    try {\n      setTypingSpeaker(speaker1);\n      \n      // Generate responses from both speakers\n      const responses = await generateUserQuestionResponse(\n        speaker1,\n        speaker2,\n        topic,\n        question,\n        messages\n      );\n\n      // Add responses with typing delays\n      setTimeout(() => {\n        setTypingSpeaker(null);\n        setMessages(prev => [\n          ...prev,\n          {\n            speaker: speaker1,\n            content: responses.speaker1,\n            timestamp: new Date().toISOString()\n          }\n        ]);\n      }, 1500);\n\n      setTimeout(() => {\n        setTypingSpeaker(speaker2);\n        setTimeout(() => {\n          setTypingSpeaker(null);\n          setMessages(prev => [\n            ...prev,\n            {\n              speaker: speaker2,\n              content: responses.speaker2,\n              timestamp: new Date().toISOString()\n            }\n          ]);\n        }, 1000 + Math.random() * 1000);\n      }, 2500);\n\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Play audio for a message\n  const playMessageAudio = (audioUrl) => {\n    if (audioUrl && ttsEnabled) {\n      // Stop any currently playing audio\n      if (currentAudio) {\n        stopAudio(currentAudio);\n      }\n      \n      // Play new audio\n      const audio = playAudio(audioUrl);\n      setCurrentAudio(audio);\n      \n      // Clean up audio when it finishes\n      if (audio) {\n        audio.onended = () => {\n          setCurrentAudio(null);\n        };\n      }\n    }\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    \n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n      \n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      \n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n      \n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      \n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n      \n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Bright Minds Discussion</h1>\n        <div className=\"user-info\">\n          <User size={16} />\n          <span>User: {userName}</span>\n        </div>\n      </div>\n\n      {error && (\n        <div style={{\n          backgroundColor: '#f8d7da',\n          color: '#721c24',\n          padding: '12px 16px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          border: '1px solid #f5c6cb'\n        }}>\n          {error}\n        </div>\n      )}\n\n      <DebateSetup\n        speaker1={speaker1}\n        speaker2={speaker2}\n        topic={topic}\n        onSpeaker1Change={setSpeaker1}\n        onSpeaker2Change={setSpeaker2}\n        onTopicChange={setTopic}\n        onStartDebate={handleStartDebate}\n        isLoading={isLoading}\n        availableSpeakers={availableSpeakers}\n      />\n\n      <Conversation\n        messages={messages}\n        isLoading={isLoading}\n        typingSpeaker={typingSpeaker}\n        speaker1={speaker1}\n        speaker2={speaker2}\n      />\n\n      {isDebateActive && (\n        <UserQuestionInput\n          onAskQuestion={handleUserQuestion}\n          disabled={isLoading || typingSpeaker}\n          userName={userName}\n        />\n      )}\n\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <button\n          onClick={handleTestAPI}\n          style={{\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          Test API Connection\n        </button>\n        {isDebateActive && (\n          <button\n            onClick={handleReset}\n            style={{\n              backgroundColor: '#6c757d',\n              color: 'white',\n              border: 'none',\n              padding: '8px 16px',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '0.9rem'\n            }}\n          >\n            Reset Debate\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,IAAI,QAAQ,cAAc;AACnC,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,iBAAiB,MAAM,gCAAgC;AAC9D,SACEC,oBAAoB,EACpBC,4BAA4B,EAC5BC,oBAAoB,EACpBC,iBAAiB,EACjBC,iBAAiB,EACjBC,mBAAmB,EACnBC,qBAAqB,QAChB,uBAAuB;AAC9B,SACEC,YAAY,EACZC,SAAS,EACTC,SAAS,EACTC,wBAAwB,QACnB,uBAAuB;AAC9B,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGvB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACwB,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC0B,KAAK,EAAEC,QAAQ,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAC4B,QAAQ,EAAEC,WAAW,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAAC8B,SAAS,EAAEC,YAAY,CAAC,GAAG/B,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgC,cAAc,EAAEC,iBAAiB,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoC,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EAC9D,MAAM,CAACsC,QAAQ,CAAC,GAAGtC,QAAQ,CAAC,MAAM,CAAC;EACnC,MAAM,CAACuC,KAAK,EAAEC,QAAQ,CAAC,GAAGxC,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACyC,UAAU,EAAEC,aAAa,CAAC,GAAG1C,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAAC2C,YAAY,EAAEC,eAAe,CAAC,GAAG5C,QAAQ,CAAC,IAAI,CAAC;;EAEtD;EACAC,SAAS,CAAC,MAAM;IACd,IAAI;MACF,MAAM4C,QAAQ,GAAGpC,oBAAoB,CAAC,CAAC;MACvC4B,oBAAoB,CAACQ,QAAQ,CAAC;IAChC,CAAC,CAAC,OAAON,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/CC,QAAQ,CAAC,mCAAmC,CAAC;IAC/C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvC,SAAS,CAAC,MAAM;IACd,IAAI;MACF6C,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CD,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,OAAO,CAACC,GAAG,CAACC,qBAAqB,GAAG,KAAK,GAAG,SAAS,CAAC;MAC5FJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,OAAO,CAACC,GAAG,CAACE,qBAAqB,CAAC;MAExEzC,iBAAiB,CAAC,CAAC;MACnBoC,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;;MAEvD;MACA,MAAMK,YAAY,GAAGnC,wBAAwB,CAAC,CAAC;MAC/CyB,aAAa,CAACU,YAAY,CAAC;MAC3BN,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEK,YAAY,CAAC;IAC3C,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChDC,QAAQ,CAACD,KAAK,CAACc,OAAO,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,YAAY,GAAGpD,WAAW,CAAC,OAAOqD,cAAc,EAAEC,YAAY,EAAEC,eAAe,KAAK;IACxF,IAAI;MACFtB,gBAAgB,CAACoB,cAAc,CAAC;;MAEhC;MACA,MAAMG,WAAW,GAAG,IAAI,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI;MAC/C,MAAM,IAAIC,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAEJ,WAAW,CAAC,CAAC;MAE9D,MAAMM,QAAQ,GAAG,MAAMzD,oBAAoB,CACzCgD,cAAc,EACdC,YAAY,EACZ9B,KAAK,EACL+B,eACF,CAAC;MAEDtB,gBAAgB,CAAC,IAAI,CAAC;;MAEtB;MACA,IAAI8B,QAAQ,GAAG,IAAI;MACnB,IAAIxB,UAAU,EAAE;QACd,IAAI;UACFwB,QAAQ,GAAG,MAAMnD,YAAY,CAACkD,QAAQ,EAAET,cAAc,CAAC;QACzD,CAAC,CAAC,OAAOW,QAAQ,EAAE;UACjBpB,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAE2B,QAAQ,CAAC;QACnD;MACF;MAEA,OAAO;QACLC,OAAO,EAAEZ,cAAc;QACvBa,OAAO,EAAEJ,QAAQ;QACjBK,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCN,QAAQ,EAAEA;MACZ,CAAC;IACH,CAAC,CAAC,OAAO1B,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CJ,gBAAgB,CAAC,IAAI,CAAC;MACtB,MAAMI,KAAK;IACb;EACF,CAAC,EAAE,CAACb,KAAK,EAAEe,UAAU,CAAC,CAAC;;EAEvB;EACA,MAAM+B,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAAClD,QAAQ,IAAI,CAACE,QAAQ,IAAI,CAACE,KAAK,CAAC+C,IAAI,CAAC,CAAC,EAAE;MAC3C;IACF;IAEA1C,YAAY,CAAC,IAAI,CAAC;IAClBS,QAAQ,CAAC,IAAI,CAAC;IACdX,WAAW,CAAC,EAAE,CAAC;IACfI,iBAAiB,CAAC,IAAI,CAAC;IAEvB,IAAI;MACF;MACA,MAAMyC,eAAe,GAAG,EAAE;;MAE1B;MACA,MAAMC,aAAa,GAAG,MAAMrB,YAAY,CAAChC,QAAQ,EAAEE,QAAQ,EAAE,EAAE,CAAC;MAChEkD,eAAe,CAACE,IAAI,CAACD,aAAa,CAAC;MACnC9C,WAAW,CAAC,CAAC8C,aAAa,CAAC,CAAC;MAC5BE,gBAAgB,CAACF,aAAa,CAACV,QAAQ,CAAC;;MAExC;MACA,MAAMa,cAAc,GAAG,MAAMxB,YAAY,CAAC9B,QAAQ,EAAEF,QAAQ,EAAE,CAACqD,aAAa,CAAC,CAAC;MAC9ED,eAAe,CAACE,IAAI,CAACE,cAAc,CAAC;MACpCjD,WAAW,CAAC,CAAC8C,aAAa,EAAEG,cAAc,CAAC,CAAC;MAC5CD,gBAAgB,CAACC,cAAc,CAACb,QAAQ,CAAC;;MAEzC;MACA,MAAMc,QAAQ,GAAG,CAAC,CAAC,CAAC;MACpB,IAAIxB,cAAc,GAAGjC,QAAQ;MAC7B,IAAIkC,YAAY,GAAGhC,QAAQ;MAE3B,KAAK,IAAIwD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;QACjC,MAAMC,UAAU,GAAG,MAAM3B,YAAY,CAACC,cAAc,EAAEC,YAAY,EAAEkB,eAAe,CAAC;QACpFA,eAAe,CAACE,IAAI,CAACK,UAAU,CAAC;QAChCpD,WAAW,CAAC,CAAC,GAAG6C,eAAe,CAAC,CAAC;;QAEjC;QACA,CAACnB,cAAc,EAAEC,YAAY,CAAC,GAAG,CAACA,YAAY,EAAED,cAAc,CAAC;;QAE/D;QACA,MAAM,IAAIM,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,GAAGH,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;MAChF;IAEF,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,kEAAkE,CAAC;IAC9E,CAAC,SAAS;MACRT,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAMmD,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;IAC7C,IAAI,CAACA,QAAQ,CAACV,IAAI,CAAC,CAAC,IAAI,CAACzC,cAAc,EAAE;;IAEzC;IACA,MAAMoD,mBAAmB,GAAG;MAC1BC,IAAI,EAAE,eAAe;MACrBjB,OAAO,EAAEe,QAAQ;MACjBd,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAED1C,WAAW,CAACyD,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEF,mBAAmB,CAAC,CAAC;IAEnD,IAAI;MACFjD,gBAAgB,CAACb,QAAQ,CAAC;;MAE1B;MACA,MAAMiE,SAAS,GAAG,MAAM/E,4BAA4B,CAClDc,QAAQ,EACRE,QAAQ,EACRE,KAAK,EACLyD,QAAQ,EACRvD,QACF,CAAC;;MAED;MACAmC,UAAU,CAAC,MAAM;QACf5B,gBAAgB,CAAC,IAAI,CAAC;QACtBN,WAAW,CAACyD,IAAI,IAAI,CAClB,GAAGA,IAAI,EACP;UACEnB,OAAO,EAAE7C,QAAQ;UACjB8C,OAAO,EAAEmB,SAAS,CAACjE,QAAQ;UAC3B+C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;QACpC,CAAC,CACF,CAAC;MACJ,CAAC,EAAE,IAAI,CAAC;MAERR,UAAU,CAAC,MAAM;QACf5B,gBAAgB,CAACX,QAAQ,CAAC;QAC1BuC,UAAU,CAAC,MAAM;UACf5B,gBAAgB,CAAC,IAAI,CAAC;UACtBN,WAAW,CAACyD,IAAI,IAAI,CAClB,GAAGA,IAAI,EACP;YACEnB,OAAO,EAAE3C,QAAQ;YACjB4C,OAAO,EAAEmB,SAAS,CAAC/D,QAAQ;YAC3B6C,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;UACpC,CAAC,CACF,CAAC;QACJ,CAAC,EAAE,IAAI,GAAGZ,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC;MACjC,CAAC,EAAE,IAAI,CAAC;IAEV,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACdO,OAAO,CAACP,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDC,QAAQ,CAAC,+CAA+C,CAAC;IAC3D;EACF,CAAC;;EAED;EACA,MAAMqC,gBAAgB,GAAIZ,QAAQ,IAAK;IACrC,IAAIA,QAAQ,IAAIxB,UAAU,EAAE;MAC1B;MACA,IAAIE,YAAY,EAAE;QAChB3B,SAAS,CAAC2B,YAAY,CAAC;MACzB;;MAEA;MACA,MAAM6C,KAAK,GAAGzE,SAAS,CAACkD,QAAQ,CAAC;MACjCrB,eAAe,CAAC4C,KAAK,CAAC;;MAEtB;MACA,IAAIA,KAAK,EAAE;QACTA,KAAK,CAACC,OAAO,GAAG,MAAM;UACpB7C,eAAe,CAAC,IAAI,CAAC;QACvB,CAAC;MACH;IACF;EACF,CAAC;;EAED;EACA,MAAM8C,WAAW,GAAGA,CAAA,KAAM;IACxB;IACA,IAAI/C,YAAY,EAAE;MAChB3B,SAAS,CAAC2B,YAAY,CAAC;MACvBC,eAAe,CAAC,IAAI,CAAC;IACvB;IAEAf,WAAW,CAAC,EAAE,CAAC;IACfI,iBAAiB,CAAC,KAAK,CAAC;IACxBE,gBAAgB,CAAC,IAAI,CAAC;IACtBK,QAAQ,CAAC,IAAI,CAAC;EAChB,CAAC;;EAED;EACA,MAAMmD,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChCnD,QAAQ,CAAC,IAAI,CAAC;IACd,IAAI;MACFM,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;;MAE9C;MACA,MAAM6C,iBAAiB,GAAG,MAAM/E,qBAAqB,CAAC,CAAC;MACvDiC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE6C,iBAAiB,CAAC;MAEjE,IAAI,CAACA,iBAAiB,EAAE;QACtBpD,QAAQ,CAAC,4EAA4E,CAAC;QACtF;MACF;;MAEA;MACA,MAAMqD,mBAAmB,GAAG,MAAMjF,mBAAmB,CAAC,CAAC;MACvDkC,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE8C,mBAAmB,CAAC;MAExE,IAAI,CAACA,mBAAmB,EAAE;QACxBrD,QAAQ,CAAC,6JAA6J,CAAC;QACvK;MACF;;MAEA;MACA,MAAMsD,OAAO,GAAG,MAAMnF,iBAAiB,CAAC,CAAC;MACzC,IAAImF,OAAO,EAAE;QACXtD,QAAQ,CAAC,iCAAiC,CAAC;MAC7C,CAAC,MAAM;QACLA,QAAQ,CAAC,wDAAwD,CAAC;MACpE;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdC,QAAQ,CAAC,mBAAmBD,KAAK,CAACc,OAAO,EAAE,CAAC;IAC9C;EACF,CAAC;EAED,oBACElC,OAAA;IAAK4E,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxB7E,OAAA;MAAK4E,SAAS,EAAC,QAAQ;MAAAC,QAAA,gBACrB7E,OAAA;QAAA6E,QAAA,EAAI;MAAuB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChCjF,OAAA;QAAK4E,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACxB7E,OAAA,CAAChB,IAAI;UAACkG,IAAI,EAAE;QAAG;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClBjF,OAAA;UAAA6E,QAAA,GAAM,QAAM,EAAC1D,QAAQ;QAAA;UAAA2D,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,EAEL7D,KAAK,iBACJpB,OAAA;MAAKmF,KAAK,EAAE;QACVC,eAAe,EAAE,SAAS;QAC1BC,KAAK,EAAE,SAAS;QAChBC,OAAO,EAAE,WAAW;QACpBC,YAAY,EAAE,KAAK;QACnBC,YAAY,EAAE,MAAM;QACpBC,MAAM,EAAE;MACV,CAAE;MAAAZ,QAAA,EACCzD;IAAK;MAAA0D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CACN,eAEDjF,OAAA,CAACf,WAAW;MACVkB,QAAQ,EAAEA,QAAS;MACnBE,QAAQ,EAAEA,QAAS;MACnBE,KAAK,EAAEA,KAAM;MACbmF,gBAAgB,EAAEtF,WAAY;MAC9BuF,gBAAgB,EAAErF,WAAY;MAC9BsF,aAAa,EAAEpF,QAAS;MACxBqF,aAAa,EAAExC,iBAAkB;MACjC1C,SAAS,EAAEA,SAAU;MACrBM,iBAAiB,EAAEA;IAAkB;MAAA6D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eAEFjF,OAAA,CAACd,YAAY;MACXuB,QAAQ,EAAEA,QAAS;MACnBE,SAAS,EAAEA,SAAU;MACrBI,aAAa,EAAEA,aAAc;MAC7BZ,QAAQ,EAAEA,QAAS;MACnBE,QAAQ,EAAEA;IAAS;MAAAyE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,EAEDpE,cAAc,iBACbb,OAAA,CAACb,iBAAiB;MAChB2G,aAAa,EAAE/B,kBAAmB;MAClCgC,QAAQ,EAAEpF,SAAS,IAAII,aAAc;MACrCI,QAAQ,EAAEA;IAAS;MAAA2D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CACF,eAEDjF,OAAA;MAAKmF,KAAK,EAAE;QAAEa,SAAS,EAAE,QAAQ;QAAEC,SAAS,EAAE;MAAO,CAAE;MAAApB,QAAA,gBACrD7E,OAAA;QACEkG,OAAO,EAAE1B,aAAc;QACvBW,KAAK,EAAE;UACLC,eAAe,EAAE,SAAS;UAC1BC,KAAK,EAAE,OAAO;UACdI,MAAM,EAAE,MAAM;UACdH,OAAO,EAAE,UAAU;UACnBC,YAAY,EAAE,KAAK;UACnBY,MAAM,EAAE,SAAS;UACjBC,QAAQ,EAAE,QAAQ;UAClBC,WAAW,EAAE;QACf,CAAE;QAAAxB,QAAA,EACH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,EACRpE,cAAc,iBACbb,OAAA;QACEkG,OAAO,EAAE3B,WAAY;QACrBY,KAAK,EAAE;UACLC,eAAe,EAAE,SAAS;UAC1BC,KAAK,EAAE,OAAO;UACdI,MAAM,EAAE,MAAM;UACdH,OAAO,EAAE,UAAU;UACnBC,YAAY,EAAE,KAAK;UACnBY,MAAM,EAAE,SAAS;UACjBC,QAAQ,EAAE;QACZ,CAAE;QAAAvB,QAAA,EACH;MAED;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CACT;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/E,EAAA,CAlWQD,GAAG;AAAAqG,EAAA,GAAHrG,GAAG;AAoWZ,eAAeA,GAAG;AAAC,IAAAqG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}