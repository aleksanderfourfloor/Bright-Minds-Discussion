{"ast":null,"code":"var _jsxFileName = \"/Users/aleksander/Documents/Development/GMIxc/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { generateConversation, generateConversationWithUserQuestion, generateUserQuestionResponse, getAvailableSpeakers, validateGMIConfig, testGMIConnection, testGMIConnectivity, testBasicConnectivity } from './services/gmiService';\nimport { textToSpeech, playAudio, stopAudio, validateElevenLabsConfig } from './services/ttsService';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName, setUserName] = useState('Aleksander');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(true); // Enable TTS by default for testing\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n\n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n      console.log('ElevenLabs API key:', process.env.REACT_APP_ELEVENLABS_API_KEY ? 'Set' : 'Not set');\n\n      // Test browser TTS availability\n      if ('speechSynthesis' in window) {\n        console.log('Browser TTS is available');\n        const voices = speechSynthesis.getVoices();\n        console.log('Available browser voices:', voices.length);\n        if (voices.length > 0) {\n          console.log('First voice:', voices[0].name);\n        }\n      } else {\n        console.log('Browser TTS is NOT available');\n      }\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n\n      // Very short typing delay (0.2-0.8 seconds for faster responses)\n      const typingDelay = 200 + Math.random() * 600;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      const response = await generateConversation(currentSpeaker, otherSpeaker, topic, currentMessages);\n      setTypingSpeaker(null);\n\n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Generate a conversation turn that incorporates user question\n  const generateTurnWithUserQuestion = useCallback(async (currentSpeaker, otherSpeaker, topic, userQuestion, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n\n      // Very short typing delay (0.2-0.8 seconds for faster responses)\n      const typingDelay = 200 + Math.random() * 600;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      const response = await generateConversationWithUserQuestion(currentSpeaker, otherSpeaker, topic, userQuestion, currentMessages);\n      setTypingSpeaker(null);\n\n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn with user question:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n\n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n\n      // Start generating second speaker's response while first speaker's audio plays\n      const secondResponsePromise = generateTurn(speaker2, speaker1, [firstResponse]);\n\n      // Wait for first speaker's audio to finish\n      await playMessageAudio(firstResponse.audioUrl);\n\n      // Very short pause between speakers (0.1-0.3 seconds)\n      await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n\n      // Get the second speaker's response (should be ready by now)\n      const secondResponse = await secondResponsePromise;\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n\n      // Wait for second speaker's audio to finish\n      await playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      for (let i = 2; i < maxTurns; i++) {\n        // Very short pause before next speaker (0.1-0.3 seconds)\n        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n\n        // Start generating next response\n        const nextMessagePromise = generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n\n        // Get the generated response (should be ready by now)\n        const newMessage = await nextMessagePromise;\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n\n        // Wait for current speaker's audio to finish\n        await playMessageAudio(newMessage.audioUrl);\n\n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n      }\n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async question => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Stop any currently playing audio to prioritize user question\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      userName: userName,\n      timestamp: new Date().toISOString()\n    };\n    setMessages(prev => [...prev, userQuestionMessage]);\n    try {\n      // Continue the debate with the user question integrated\n      await continueDebateWithQuestion(question);\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Continue debate with user question integrated\n  const continueDebateWithQuestion = async userQuestion => {\n    // Add 2-3 more turns to the debate incorporating the user question\n    const additionalTurns = 3;\n    let currentSpeaker = speaker1;\n    let otherSpeaker = speaker2;\n    for (let i = 0; i < additionalTurns; i++) {\n      // Short pause before next speaker\n      await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500));\n\n      // Generate next response incorporating the user question\n      const newMessage = await generateTurnWithUserQuestion(currentSpeaker, otherSpeaker, topic, userQuestion, messages // Use the current messages state which includes the user question\n      );\n\n      // Add the new message to the state\n      setMessages(prev => [...prev, newMessage]);\n\n      // Wait for current speaker's audio to finish\n      await playMessageAudio(newMessage.audioUrl);\n\n      // Switch speakers\n      [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n    }\n  };\n\n  // Play audio for a message and return a promise that resolves when audio finishes\n  const playMessageAudio = audioUrl => {\n    return new Promise(resolve => {\n      console.log('playMessageAudio called with:', audioUrl ? 'audio URL' : 'no audio');\n      console.log('TTS enabled:', ttsEnabled);\n      if (audioUrl && ttsEnabled) {\n        // Stop any currently playing audio\n        if (currentAudio) {\n          stopAudio(currentAudio);\n        }\n\n        // Play new audio\n        const audio = playAudio(audioUrl);\n        setCurrentAudio(audio);\n        console.log('Audio playback started:', audio ? 'Yes' : 'No');\n\n        // Resolve when audio finishes\n        if (audio) {\n          audio.onended = () => {\n            console.log('Audio finished playing');\n            setCurrentAudio(null);\n            resolve();\n          };\n          // Fallback in case audio fails to load\n          audio.onerror = () => {\n            console.log('Audio playback failed');\n            setCurrentAudio(null);\n            resolve();\n          };\n        } else {\n          console.log('No audio object created');\n          resolve();\n        }\n      } else if (ttsEnabled && !audioUrl) {\n        // Browser TTS case - audioUrl is null but TTS is enabled\n        console.log('Using browser TTS (no audio URL)');\n        // For browser TTS, we need to wait a bit to simulate audio duration\n        const estimatedDuration = 1000; // 1 second estimate for short responses\n        setTimeout(() => {\n          console.log('Browser TTS estimated duration completed');\n          resolve();\n        }, estimatedDuration);\n      } else {\n        // If no audio, resolve immediately\n        console.log('No audio URL or TTS disabled, resolving immediately');\n        resolve();\n      }\n    });\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n\n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n\n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n\n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Bright Minds Discussion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-info\",\n        children: [/*#__PURE__*/_jsxDEV(User, {\n          size: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 409,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: \"User: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userName,\n          onChange: e => setUserName(e.target.value),\n          style: {\n            border: 'none',\n            background: 'transparent',\n            color: '#6c757d',\n            fontSize: '0.9rem',\n            fontWeight: '600',\n            width: '120px',\n            outline: 'none',\n            textAlign: 'left'\n          },\n          placeholder: \"Your name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        backgroundColor: '#f8d7da',\n        color: '#721c24',\n        padding: '12px 16px',\n        borderRadius: '8px',\n        marginBottom: '20px',\n        border: '1px solid #f5c6cb'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(DebateSetup, {\n      speaker1: speaker1,\n      speaker2: speaker2,\n      topic: topic,\n      onSpeaker1Change: setSpeaker1,\n      onSpeaker2Change: setSpeaker2,\n      onTopicChange: setTopic,\n      onStartDebate: handleStartDebate,\n      isLoading: isLoading,\n      availableSpeakers: availableSpeakers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Conversation, {\n      messages: messages,\n      isLoading: isLoading,\n      typingSpeaker: typingSpeaker,\n      speaker1: speaker1,\n      speaker2: speaker2\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 7\n    }, this), isDebateActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"floating-input-container\",\n      children: /*#__PURE__*/_jsxDEV(UserQuestionInput, {\n        onAskQuestion: handleUserQuestion,\n        disabled: false,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 464,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center',\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleTestAPI,\n        style: {\n          backgroundColor: '#007bff',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: \"Test API Connection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          console.log('Testing TTS...');\n          if ('speechSynthesis' in window) {\n            const utterance = new SpeechSynthesisUtterance('Hello, this is a test of text to speech.');\n            utterance.onstart = () => console.log('TTS test started');\n            utterance.onend = () => console.log('TTS test finished');\n            utterance.onerror = e => console.log('TTS test error:', e.error);\n            speechSynthesis.speak(utterance);\n          } else {\n            console.log('Speech synthesis not available');\n          }\n        },\n        style: {\n          backgroundColor: '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: \"Test TTS\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setTtsEnabled(!ttsEnabled),\n        style: {\n          backgroundColor: ttsEnabled ? '#28a745' : '#6c757d',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem',\n          marginRight: '10px'\n        },\n        children: ttsEnabled ? '🎤 TTS ON' : '🔇 TTS OFF'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), isDebateActive && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        style: {\n          backgroundColor: '#6c757d',\n          color: 'white',\n          border: 'none',\n          padding: '8px 16px',\n          borderRadius: '6px',\n          cursor: 'pointer',\n          fontSize: '0.9rem'\n        },\n        children: \"Reset Debate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 473,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 405,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"181mCRDxkD6TGXbpjdLveZyNROE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","User","DebateSetup","Conversation","UserQuestionInput","generateConversation","generateConversationWithUserQuestion","generateUserQuestionResponse","getAvailableSpeakers","validateGMIConfig","testGMIConnection","testGMIConnectivity","testBasicConnectivity","textToSpeech","playAudio","stopAudio","validateElevenLabsConfig","jsxDEV","_jsxDEV","App","_s","speaker1","setSpeaker1","speaker2","setSpeaker2","topic","setTopic","messages","setMessages","isLoading","setIsLoading","isDebateActive","setIsDebateActive","typingSpeaker","setTypingSpeaker","availableSpeakers","setAvailableSpeakers","userName","setUserName","error","setError","ttsEnabled","setTtsEnabled","currentAudio","setCurrentAudio","speakers","console","log","process","env","REACT_APP_GMI_API_KEY","REACT_APP_GMI_API_URL","ttsAvailable","REACT_APP_ELEVENLABS_API_KEY","window","voices","speechSynthesis","getVoices","length","name","message","generateTurn","currentSpeaker","otherSpeaker","currentMessages","typingDelay","Math","random","Promise","resolve","setTimeout","response","audioUrl","substring","ttsError","speaker","content","timestamp","Date","toISOString","generateTurnWithUserQuestion","userQuestion","handleStartDebate","trim","initialMessages","firstResponse","push","secondResponsePromise","playMessageAudio","secondResponse","maxTurns","i","nextMessagePromise","newMessage","handleUserQuestion","question","userQuestionMessage","type","prev","continueDebateWithQuestion","additionalTurns","audio","onended","onerror","estimatedDuration","handleReset","handleTestAPI","basicConnectivity","connectivitySuccess","success","className","children","fileName","_jsxFileName","lineNumber","columnNumber","size","value","onChange","e","target","style","border","background","color","fontSize","fontWeight","width","outline","textAlign","placeholder","backgroundColor","padding","borderRadius","marginBottom","onSpeaker1Change","onSpeaker2Change","onTopicChange","onStartDebate","onAskQuestion","disabled","marginTop","onClick","cursor","marginRight","utterance","SpeechSynthesisUtterance","onstart","onend","speak","_c","$RefreshReg$"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { User } from 'lucide-react';\nimport DebateSetup from './components/DebateSetup';\nimport Conversation from './components/Conversation';\nimport UserQuestionInput from './components/UserQuestionInput';\nimport { \n  generateConversation, \n  generateConversationWithUserQuestion,\n  generateUserQuestionResponse, \n  getAvailableSpeakers, \n  validateGMIConfig,\n  testGMIConnection,\n  testGMIConnectivity,\n  testBasicConnectivity\n} from './services/gmiService';\nimport { \n  textToSpeech, \n  playAudio, \n  stopAudio, \n  validateElevenLabsConfig \n} from './services/ttsService';\nimport './App.css';\n\nfunction App() {\n  const [speaker1, setSpeaker1] = useState('');\n  const [speaker2, setSpeaker2] = useState('');\n  const [topic, setTopic] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDebateActive, setIsDebateActive] = useState(false);\n  const [typingSpeaker, setTypingSpeaker] = useState(null);\n  const [availableSpeakers, setAvailableSpeakers] = useState([]);\n  const [userName, setUserName] = useState('Aleksander');\n  const [error, setError] = useState(null);\n  const [ttsEnabled, setTtsEnabled] = useState(true); // Enable TTS by default for testing\n  const [currentAudio, setCurrentAudio] = useState(null);\n\n  // Initialize available speakers\n  useEffect(() => {\n    try {\n      const speakers = getAvailableSpeakers();\n      setAvailableSpeakers(speakers);\n    } catch (error) {\n      console.error('Error loading speakers:', error);\n      setError('Failed to load available speakers');\n    }\n  }, []);\n\n  // Validate GMI configuration on mount\n  useEffect(() => {\n    try {\n      console.log('Environment variables check:');\n      console.log('REACT_APP_GMI_API_KEY:', process.env.REACT_APP_GMI_API_KEY ? 'Set' : 'Not set');\n      console.log('REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\n      \n      validateGMIConfig();\n      console.log('GMI configuration validated successfully');\n      \n      // Check TTS configuration\n      const ttsAvailable = validateElevenLabsConfig();\n      setTtsEnabled(ttsAvailable);\n      console.log('TTS enabled:', ttsAvailable);\n      console.log('ElevenLabs API key:', process.env.REACT_APP_ELEVENLABS_API_KEY ? 'Set' : 'Not set');\n      \n      // Test browser TTS availability\n      if ('speechSynthesis' in window) {\n        console.log('Browser TTS is available');\n        const voices = speechSynthesis.getVoices();\n        console.log('Available browser voices:', voices.length);\n        if (voices.length > 0) {\n          console.log('First voice:', voices[0].name);\n        }\n      } else {\n        console.log('Browser TTS is NOT available');\n      }\n    } catch (error) {\n      console.error('GMI configuration error:', error);\n      setError(error.message);\n    }\n  }, []);\n\n  // Generate a conversation turn with delay for natural feel\n  const generateTurn = useCallback(async (currentSpeaker, otherSpeaker, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n      \n      // Very short typing delay (0.2-0.8 seconds for faster responses)\n      const typingDelay = 200 + Math.random() * 600;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      \n      const response = await generateConversation(\n        currentSpeaker, \n        otherSpeaker, \n        topic, \n        currentMessages\n      );\n      \n      setTypingSpeaker(null);\n      \n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      \n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Generate a conversation turn that incorporates user question\n  const generateTurnWithUserQuestion = useCallback(async (currentSpeaker, otherSpeaker, topic, userQuestion, currentMessages) => {\n    try {\n      setTypingSpeaker(currentSpeaker);\n      \n      // Very short typing delay (0.2-0.8 seconds for faster responses)\n      const typingDelay = 200 + Math.random() * 600;\n      await new Promise(resolve => setTimeout(resolve, typingDelay));\n      \n      const response = await generateConversationWithUserQuestion(\n        currentSpeaker, \n        otherSpeaker, \n        topic, \n        userQuestion,\n        currentMessages\n      );\n      \n      setTypingSpeaker(null);\n      \n      // Generate TTS for the response\n      let audioUrl = null;\n      if (ttsEnabled) {\n        try {\n          console.log(`Generating TTS for ${currentSpeaker}:`, response.substring(0, 100) + '...');\n          audioUrl = await textToSpeech(response, currentSpeaker);\n          console.log('TTS generated successfully:', audioUrl ? 'Yes' : 'No');\n        } catch (ttsError) {\n          console.error('TTS generation failed:', ttsError);\n        }\n      } else {\n        console.log('TTS is disabled');\n      }\n      \n      return {\n        speaker: currentSpeaker,\n        content: response,\n        timestamp: new Date().toISOString(),\n        audioUrl: audioUrl\n      };\n    } catch (error) {\n      console.error('Error generating turn with user question:', error);\n      setTypingSpeaker(null);\n      throw error;\n    }\n  }, [topic, ttsEnabled]);\n\n  // Start the debate\n  const handleStartDebate = async () => {\n    if (!speaker1 || !speaker2 || !topic.trim()) {\n      return;\n    }\n\n    setIsLoading(true);\n    setError(null);\n    setMessages([]);\n    setIsDebateActive(true);\n\n    try {\n      // Generate initial responses from both speakers\n      const initialMessages = [];\n      \n      // First speaker starts\n      const firstResponse = await generateTurn(speaker1, speaker2, []);\n      initialMessages.push(firstResponse);\n      setMessages([firstResponse]);\n      \n      // Start generating second speaker's response while first speaker's audio plays\n      const secondResponsePromise = generateTurn(speaker2, speaker1, [firstResponse]);\n      \n      // Wait for first speaker's audio to finish\n      await playMessageAudio(firstResponse.audioUrl);\n\n      // Very short pause between speakers (0.1-0.3 seconds)\n      await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n\n      // Get the second speaker's response (should be ready by now)\n      const secondResponse = await secondResponsePromise;\n      initialMessages.push(secondResponse);\n      setMessages([firstResponse, secondResponse]);\n      \n      // Wait for second speaker's audio to finish\n      await playMessageAudio(secondResponse.audioUrl);\n\n      // Continue conversation for 5-10 minutes (simulated with more turns)\n      const maxTurns = 8; // Simulate 5-10 minutes of conversation\n      let currentSpeaker = speaker1;\n      let otherSpeaker = speaker2;\n      \n      for (let i = 2; i < maxTurns; i++) {\n        // Very short pause before next speaker (0.1-0.3 seconds)\n        await new Promise(resolve => setTimeout(resolve, 100 + Math.random() * 200));\n        \n        // Start generating next response\n        const nextMessagePromise = generateTurn(currentSpeaker, otherSpeaker, initialMessages);\n        \n        // Get the generated response (should be ready by now)\n        const newMessage = await nextMessagePromise;\n        initialMessages.push(newMessage);\n        setMessages([...initialMessages]);\n        \n        // Wait for current speaker's audio to finish\n        await playMessageAudio(newMessage.audioUrl);\n        \n        // Switch speakers\n        [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n      }\n      \n    } catch (error) {\n      console.error('Error starting debate:', error);\n      setError('Failed to start debate. Please check your GMI API configuration.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Handle user question\n  const handleUserQuestion = async (question) => {\n    if (!question.trim() || !isDebateActive) return;\n\n    // Stop any currently playing audio to prioritize user question\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n\n    // Add user question to messages\n    const userQuestionMessage = {\n      type: 'user-question',\n      content: question,\n      userName: userName,\n      timestamp: new Date().toISOString()\n    };\n    \n    setMessages(prev => [...prev, userQuestionMessage]);\n\n    try {\n      // Continue the debate with the user question integrated\n      await continueDebateWithQuestion(question);\n    } catch (error) {\n      console.error('Error handling user question:', error);\n      setError('Failed to generate response to your question.');\n    }\n  };\n\n  // Continue debate with user question integrated\n  const continueDebateWithQuestion = async (userQuestion) => {\n    // Add 2-3 more turns to the debate incorporating the user question\n    const additionalTurns = 3;\n    let currentSpeaker = speaker1;\n    let otherSpeaker = speaker2;\n    \n    for (let i = 0; i < additionalTurns; i++) {\n      // Short pause before next speaker\n      await new Promise(resolve => setTimeout(resolve, 300 + Math.random() * 500));\n      \n      // Generate next response incorporating the user question\n      const newMessage = await generateTurnWithUserQuestion(\n        currentSpeaker, \n        otherSpeaker, \n        topic, \n        userQuestion,\n        messages // Use the current messages state which includes the user question\n      );\n      \n      // Add the new message to the state\n      setMessages(prev => [...prev, newMessage]);\n      \n      // Wait for current speaker's audio to finish\n      await playMessageAudio(newMessage.audioUrl);\n      \n      // Switch speakers\n      [currentSpeaker, otherSpeaker] = [otherSpeaker, currentSpeaker];\n    }\n  };\n\n  // Play audio for a message and return a promise that resolves when audio finishes\n  const playMessageAudio = (audioUrl) => {\n    return new Promise((resolve) => {\n      console.log('playMessageAudio called with:', audioUrl ? 'audio URL' : 'no audio');\n      console.log('TTS enabled:', ttsEnabled);\n      \n      if (audioUrl && ttsEnabled) {\n        // Stop any currently playing audio\n        if (currentAudio) {\n          stopAudio(currentAudio);\n        }\n        \n        // Play new audio\n        const audio = playAudio(audioUrl);\n        setCurrentAudio(audio);\n        \n        console.log('Audio playback started:', audio ? 'Yes' : 'No');\n        \n        // Resolve when audio finishes\n        if (audio) {\n          audio.onended = () => {\n            console.log('Audio finished playing');\n            setCurrentAudio(null);\n            resolve();\n          };\n          // Fallback in case audio fails to load\n          audio.onerror = () => {\n            console.log('Audio playback failed');\n            setCurrentAudio(null);\n            resolve();\n          };\n        } else {\n          console.log('No audio object created');\n          resolve();\n        }\n      } else if (ttsEnabled && !audioUrl) {\n        // Browser TTS case - audioUrl is null but TTS is enabled\n        console.log('Using browser TTS (no audio URL)');\n        // For browser TTS, we need to wait a bit to simulate audio duration\n        const estimatedDuration = 1000; // 1 second estimate for short responses\n        setTimeout(() => {\n          console.log('Browser TTS estimated duration completed');\n          resolve();\n        }, estimatedDuration);\n      } else {\n        // If no audio, resolve immediately\n        console.log('No audio URL or TTS disabled, resolving immediately');\n        resolve();\n      }\n    });\n  };\n\n  // Reset debate\n  const handleReset = () => {\n    // Stop any playing audio\n    if (currentAudio) {\n      stopAudio(currentAudio);\n      setCurrentAudio(null);\n    }\n    \n    setMessages([]);\n    setIsDebateActive(false);\n    setTypingSpeaker(null);\n    setError(null);\n  };\n\n  // Test API connection\n  const handleTestAPI = async () => {\n    setError(null);\n    try {\n      console.log('Starting API connection test...');\n      \n      // First test basic internet connectivity\n      const basicConnectivity = await testBasicConnectivity();\n      console.log('Basic connectivity test result:', basicConnectivity);\n      \n      if (!basicConnectivity) {\n        setError('Basic internet connectivity failed. Please check your internet connection.');\n        return;\n      }\n      \n      // Then test AI service connectivity\n      const connectivitySuccess = await testGMIConnectivity();\n      console.log('AI service connectivity test result:', connectivitySuccess);\n      \n      if (!connectivitySuccess) {\n        setError('Cannot reach any AI service servers. This could be due to: 1) Network restrictions, 2) Incorrect API URL, 3) Service being down. Check console for details.');\n        return;\n      }\n      \n      // Finally test API functionality\n      const success = await testGMIConnection();\n      if (success) {\n        setError('API connection test successful!');\n      } else {\n        setError('API connection test failed. Check console for details.');\n      }\n    } catch (error) {\n      setError(`API test error: ${error.message}`);\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Bright Minds Discussion</h1>\n        <div className=\"user-info\">\n          <User size={16} />\n          <span>User: </span>\n          <input\n            type=\"text\"\n            value={userName}\n            onChange={(e) => setUserName(e.target.value)}\n            style={{\n              border: 'none',\n              background: 'transparent',\n              color: '#6c757d',\n              fontSize: '0.9rem',\n              fontWeight: '600',\n              width: '120px',\n              outline: 'none',\n              textAlign: 'left'\n            }}\n            placeholder=\"Your name\"\n          />\n        </div>\n      </div>\n\n      {error && (\n        <div style={{\n          backgroundColor: '#f8d7da',\n          color: '#721c24',\n          padding: '12px 16px',\n          borderRadius: '8px',\n          marginBottom: '20px',\n          border: '1px solid #f5c6cb'\n        }}>\n          {error}\n        </div>\n      )}\n\n      <DebateSetup\n        speaker1={speaker1}\n        speaker2={speaker2}\n        topic={topic}\n        onSpeaker1Change={setSpeaker1}\n        onSpeaker2Change={setSpeaker2}\n        onTopicChange={setTopic}\n        onStartDebate={handleStartDebate}\n        isLoading={isLoading}\n        availableSpeakers={availableSpeakers}\n      />\n\n      <Conversation\n        messages={messages}\n        isLoading={isLoading}\n        typingSpeaker={typingSpeaker}\n        speaker1={speaker1}\n        speaker2={speaker2}\n      />\n\n      {isDebateActive && (\n        <div className=\"floating-input-container\">\n          <UserQuestionInput\n            onAskQuestion={handleUserQuestion}\n            disabled={false}\n            userName={userName}\n          />\n        </div>\n      )}\n\n      <div style={{ textAlign: 'center', marginTop: '20px' }}>\n        <button\n          onClick={handleTestAPI}\n          style={{\n            backgroundColor: '#007bff',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          Test API Connection\n        </button>\n        \n        <button\n          onClick={() => {\n            console.log('Testing TTS...');\n            if ('speechSynthesis' in window) {\n              const utterance = new SpeechSynthesisUtterance('Hello, this is a test of text to speech.');\n              utterance.onstart = () => console.log('TTS test started');\n              utterance.onend = () => console.log('TTS test finished');\n              utterance.onerror = (e) => console.log('TTS test error:', e.error);\n              speechSynthesis.speak(utterance);\n            } else {\n              console.log('Speech synthesis not available');\n            }\n          }}\n          style={{\n            backgroundColor: '#28a745',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          Test TTS\n        </button>\n        <button\n          onClick={() => setTtsEnabled(!ttsEnabled)}\n          style={{\n            backgroundColor: ttsEnabled ? '#28a745' : '#6c757d',\n            color: 'white',\n            border: 'none',\n            padding: '8px 16px',\n            borderRadius: '6px',\n            cursor: 'pointer',\n            fontSize: '0.9rem',\n            marginRight: '10px'\n          }}\n        >\n          {ttsEnabled ? '🎤 TTS ON' : '🔇 TTS OFF'}\n        </button>\n        {isDebateActive && (\n          <button\n            onClick={handleReset}\n            style={{\n              backgroundColor: '#6c757d',\n              color: 'white',\n              border: 'none',\n              padding: '8px 16px',\n              borderRadius: '6px',\n              cursor: 'pointer',\n              fontSize: '0.9rem'\n            }}\n          >\n            Reset Debate\n          </button>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}