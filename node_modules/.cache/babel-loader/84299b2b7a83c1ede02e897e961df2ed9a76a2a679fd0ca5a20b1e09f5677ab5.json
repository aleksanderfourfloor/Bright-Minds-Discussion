{"ast":null,"code":"import axios from 'axios';\n\n// ElevenLabs API configuration\nconst ELEVENLABS_API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\n\n// Voice IDs for different speakers (you can customize these)\nconst VOICE_IDS = {\n  'Steve Jobs': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (confident, clear)\n  'Elon Musk': 'VR6AewLTigWG4xSOukaG',\n  // Arnold voice (deep, authoritative)\n  'Bill Gates': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (analytical)\n  'Warren Buffett': 'VR6AewLTigWG4xSOukaG',\n  // Arnold voice (wise, measured)\n  'Oprah Winfrey': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (warm, empathetic)\n  'Albert Einstein': 'VR6AewLTigWG4xSOukaG' // Arnold voice (thoughtful)\n};\n\n// Initialize ElevenLabs API\nconst elevenLabsApi = axios.create({\n  baseURL: ELEVENLABS_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'xi-api-key': ELEVENLABS_API_KEY\n  }\n});\n\n// Convert text to speech\nexport const textToSpeech = async (text, speaker) => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      console.warn('ElevenLabs API key not configured. Using browser TTS as fallback.');\n\n      // Use browser's built-in speech synthesis as fallback\n      return new Promise(resolve => {\n        console.log('Starting browser TTS for:', speaker);\n        console.log('Text to speak:', text.substring(0, 50) + '...');\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.0;\n        utterance.volume = 0.8;\n\n        // Set different voices for different speakers\n        const voices = speechSynthesis.getVoices();\n        console.log('Available voices:', voices.length);\n        if (voices.length > 0) {\n          var _utterance$voice;\n          // Use different voices based on speaker\n          const voiceIndex = speaker === 'Elon Musk' ? 1 : 0;\n          utterance.voice = voices[voiceIndex % voices.length];\n          console.log('Selected voice:', (_utterance$voice = utterance.voice) === null || _utterance$voice === void 0 ? void 0 : _utterance$voice.name);\n        }\n        utterance.onstart = () => {\n          console.log('Browser TTS started speaking');\n        };\n        utterance.onend = () => {\n          console.log('Browser TTS finished');\n          resolve(null); // Return null since we can't create a URL for browser TTS\n        };\n        utterance.onerror = event => {\n          console.log('Browser TTS failed:', event.error);\n          resolve(null);\n        };\n        try {\n          speechSynthesis.speak(utterance);\n          console.log('Speech synthesis speak() called');\n        } catch (error) {\n          console.error('Error calling speechSynthesis.speak():', error);\n          resolve(null);\n        }\n        resolve(null); // Return null for browser TTS\n      });\n    }\n    const voiceId = VOICE_IDS[speaker] || VOICE_IDS['Steve Jobs']; // Default fallback\n\n    console.log(`Converting text to speech for ${speaker} using voice ${voiceId}`);\n    const response = await elevenLabsApi.post(`/text-to-speech/${voiceId}`, {\n      text: text,\n      model_id: 'eleven_monolingual_v1',\n      voice_settings: {\n        stability: 0.5,\n        similarity_boost: 0.5\n      }\n    }, {\n      responseType: 'blob'\n    });\n\n    // Create audio blob and URL\n    const audioBlob = new Blob([response.data], {\n      type: 'audio/mpeg'\n    });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    console.log('TTS conversion successful');\n    return audioUrl;\n  } catch (error) {\n    console.error('TTS conversion failed:', error);\n    return null;\n  }\n};\n\n// Play audio\nexport const playAudio = audioUrl => {\n  if (!audioUrl) return;\n  const audio = new Audio(audioUrl);\n  audio.play().catch(error => {\n    console.error('Failed to play audio:', error);\n  });\n  return audio;\n};\n\n// Stop audio\nexport const stopAudio = audio => {\n  if (audio) {\n    audio.pause();\n    audio.currentTime = 0;\n  }\n};\n\n// Get available voices from ElevenLabs\nexport const getAvailableVoices = async () => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      return [];\n    }\n    const response = await elevenLabsApi.get('/voices');\n    return response.data.voices;\n  } catch (error) {\n    console.error('Failed to get available voices:', error);\n    return [];\n  }\n};\n\n// Validate ElevenLabs configuration\nexport const validateElevenLabsConfig = () => {\n  if (!ELEVENLABS_API_KEY) {\n    console.warn('ElevenLabs API key not configured. TTS will be disabled.');\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["axios","ELEVENLABS_API_KEY","process","env","REACT_APP_ELEVENLABS_API_KEY","ELEVENLABS_API_URL","VOICE_IDS","elevenLabsApi","create","baseURL","headers","textToSpeech","text","speaker","console","warn","Promise","resolve","log","substring","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","speechSynthesis","getVoices","length","_utterance$voice","voiceIndex","voice","name","onstart","onend","onerror","event","error","speak","voiceId","response","post","model_id","voice_settings","stability","similarity_boost","responseType","audioBlob","Blob","data","type","audioUrl","URL","createObjectURL","playAudio","audio","Audio","play","catch","stopAudio","pause","currentTime","getAvailableVoices","get","validateElevenLabsConfig"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/services/ttsService.js"],"sourcesContent":["import axios from 'axios';\n\n// ElevenLabs API configuration\nconst ELEVENLABS_API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\n\n// Voice IDs for different speakers (you can customize these)\nconst VOICE_IDS = {\n  'Steve Jobs': 'pNInz6obpgDQGcFmaJgB', // Adam voice (confident, clear)\n  'Elon Musk': 'VR6AewLTigWG4xSOukaG', // Arnold voice (deep, authoritative)\n  'Bill Gates': 'pNInz6obpgDQGcFmaJgB', // Adam voice (analytical)\n  'Warren Buffett': 'VR6AewLTigWG4xSOukaG', // Arnold voice (wise, measured)\n  'Oprah Winfrey': 'pNInz6obpgDQGcFmaJgB', // Adam voice (warm, empathetic)\n  'Albert Einstein': 'VR6AewLTigWG4xSOukaG' // Arnold voice (thoughtful)\n};\n\n// Initialize ElevenLabs API\nconst elevenLabsApi = axios.create({\n  baseURL: ELEVENLABS_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'xi-api-key': ELEVENLABS_API_KEY\n  }\n});\n\n// Convert text to speech\nexport const textToSpeech = async (text, speaker) => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      console.warn('ElevenLabs API key not configured. Using browser TTS as fallback.');\n      \n      // Use browser's built-in speech synthesis as fallback\n      return new Promise((resolve) => {\n        console.log('Starting browser TTS for:', speaker);\n        console.log('Text to speak:', text.substring(0, 50) + '...');\n        \n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.0;\n        utterance.volume = 0.8;\n        \n        // Set different voices for different speakers\n        const voices = speechSynthesis.getVoices();\n        console.log('Available voices:', voices.length);\n        \n        if (voices.length > 0) {\n          // Use different voices based on speaker\n          const voiceIndex = speaker === 'Elon Musk' ? 1 : 0;\n          utterance.voice = voices[voiceIndex % voices.length];\n          console.log('Selected voice:', utterance.voice?.name);\n        }\n        \n        utterance.onstart = () => {\n          console.log('Browser TTS started speaking');\n        };\n        \n        utterance.onend = () => {\n          console.log('Browser TTS finished');\n          resolve(null); // Return null since we can't create a URL for browser TTS\n        };\n        \n        utterance.onerror = (event) => {\n          console.log('Browser TTS failed:', event.error);\n          resolve(null);\n        };\n        \n        try {\n          speechSynthesis.speak(utterance);\n          console.log('Speech synthesis speak() called');\n        } catch (error) {\n          console.error('Error calling speechSynthesis.speak():', error);\n          resolve(null);\n        }\n        \n        resolve(null); // Return null for browser TTS\n      });\n    }\n\n    const voiceId = VOICE_IDS[speaker] || VOICE_IDS['Steve Jobs']; // Default fallback\n    \n    console.log(`Converting text to speech for ${speaker} using voice ${voiceId}`);\n    \n    const response = await elevenLabsApi.post(`/text-to-speech/${voiceId}`, {\n      text: text,\n      model_id: 'eleven_monolingual_v1',\n      voice_settings: {\n        stability: 0.5,\n        similarity_boost: 0.5\n      }\n    }, {\n      responseType: 'blob'\n    });\n\n    // Create audio blob and URL\n    const audioBlob = new Blob([response.data], { type: 'audio/mpeg' });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    \n    console.log('TTS conversion successful');\n    return audioUrl;\n  } catch (error) {\n    console.error('TTS conversion failed:', error);\n    return null;\n  }\n};\n\n// Play audio\nexport const playAudio = (audioUrl) => {\n  if (!audioUrl) return;\n  \n  const audio = new Audio(audioUrl);\n  audio.play().catch(error => {\n    console.error('Failed to play audio:', error);\n  });\n  \n  return audio;\n};\n\n// Stop audio\nexport const stopAudio = (audio) => {\n  if (audio) {\n    audio.pause();\n    audio.currentTime = 0;\n  }\n};\n\n// Get available voices from ElevenLabs\nexport const getAvailableVoices = async () => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      return [];\n    }\n    \n    const response = await elevenLabsApi.get('/voices');\n    return response.data.voices;\n  } catch (error) {\n    console.error('Failed to get available voices:', error);\n    return [];\n  }\n};\n\n// Validate ElevenLabs configuration\nexport const validateElevenLabsConfig = () => {\n  if (!ELEVENLABS_API_KEY) {\n    console.warn('ElevenLabs API key not configured. TTS will be disabled.');\n    return false;\n  }\n  return true;\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,kBAAkB,GAAGC,OAAO,CAACC,GAAG,CAACC,4BAA4B;AACnE,MAAMC,kBAAkB,GAAG,8BAA8B;;AAEzD;AACA,MAAMC,SAAS,GAAG;EAChB,YAAY,EAAE,sBAAsB;EAAE;EACtC,WAAW,EAAE,sBAAsB;EAAE;EACrC,YAAY,EAAE,sBAAsB;EAAE;EACtC,gBAAgB,EAAE,sBAAsB;EAAE;EAC1C,eAAe,EAAE,sBAAsB;EAAE;EACzC,iBAAiB,EAAE,sBAAsB,CAAC;AAC5C,CAAC;;AAED;AACA,MAAMC,aAAa,GAAGP,KAAK,CAACQ,MAAM,CAAC;EACjCC,OAAO,EAAEJ,kBAAkB;EAC3BK,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClC,YAAY,EAAET;EAChB;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMU,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,KAAK;EACnD,IAAI;IACF,IAAI,CAACZ,kBAAkB,EAAE;MACvBa,OAAO,CAACC,IAAI,CAAC,mEAAmE,CAAC;;MAEjF;MACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9BH,OAAO,CAACI,GAAG,CAAC,2BAA2B,EAAEL,OAAO,CAAC;QACjDC,OAAO,CAACI,GAAG,CAAC,gBAAgB,EAAEN,IAAI,CAACO,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;QAE5D,MAAMC,SAAS,GAAG,IAAIC,wBAAwB,CAACT,IAAI,CAAC;QACpDQ,SAAS,CAACE,IAAI,GAAG,GAAG;QACpBF,SAAS,CAACG,KAAK,GAAG,GAAG;QACrBH,SAAS,CAACI,MAAM,GAAG,GAAG;;QAEtB;QACA,MAAMC,MAAM,GAAGC,eAAe,CAACC,SAAS,CAAC,CAAC;QAC1Cb,OAAO,CAACI,GAAG,CAAC,mBAAmB,EAAEO,MAAM,CAACG,MAAM,CAAC;QAE/C,IAAIH,MAAM,CAACG,MAAM,GAAG,CAAC,EAAE;UAAA,IAAAC,gBAAA;UACrB;UACA,MAAMC,UAAU,GAAGjB,OAAO,KAAK,WAAW,GAAG,CAAC,GAAG,CAAC;UAClDO,SAAS,CAACW,KAAK,GAAGN,MAAM,CAACK,UAAU,GAAGL,MAAM,CAACG,MAAM,CAAC;UACpDd,OAAO,CAACI,GAAG,CAAC,iBAAiB,GAAAW,gBAAA,GAAET,SAAS,CAACW,KAAK,cAAAF,gBAAA,uBAAfA,gBAAA,CAAiBG,IAAI,CAAC;QACvD;QAEAZ,SAAS,CAACa,OAAO,GAAG,MAAM;UACxBnB,OAAO,CAACI,GAAG,CAAC,8BAA8B,CAAC;QAC7C,CAAC;QAEDE,SAAS,CAACc,KAAK,GAAG,MAAM;UACtBpB,OAAO,CAACI,GAAG,CAAC,sBAAsB,CAAC;UACnCD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QACjB,CAAC;QAEDG,SAAS,CAACe,OAAO,GAAIC,KAAK,IAAK;UAC7BtB,OAAO,CAACI,GAAG,CAAC,qBAAqB,EAAEkB,KAAK,CAACC,KAAK,CAAC;UAC/CpB,OAAO,CAAC,IAAI,CAAC;QACf,CAAC;QAED,IAAI;UACFS,eAAe,CAACY,KAAK,CAAClB,SAAS,CAAC;UAChCN,OAAO,CAACI,GAAG,CAAC,iCAAiC,CAAC;QAChD,CAAC,CAAC,OAAOmB,KAAK,EAAE;UACdvB,OAAO,CAACuB,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;UAC9DpB,OAAO,CAAC,IAAI,CAAC;QACf;QAEAA,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;MACjB,CAAC,CAAC;IACJ;IAEA,MAAMsB,OAAO,GAAGjC,SAAS,CAACO,OAAO,CAAC,IAAIP,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;;IAE/DQ,OAAO,CAACI,GAAG,CAAC,iCAAiCL,OAAO,gBAAgB0B,OAAO,EAAE,CAAC;IAE9E,MAAMC,QAAQ,GAAG,MAAMjC,aAAa,CAACkC,IAAI,CAAC,mBAAmBF,OAAO,EAAE,EAAE;MACtE3B,IAAI,EAAEA,IAAI;MACV8B,QAAQ,EAAE,uBAAuB;MACjCC,cAAc,EAAE;QACdC,SAAS,EAAE,GAAG;QACdC,gBAAgB,EAAE;MACpB;IACF,CAAC,EAAE;MACDC,YAAY,EAAE;IAChB,CAAC,CAAC;;IAEF;IACA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAAC,CAACR,QAAQ,CAACS,IAAI,CAAC,EAAE;MAAEC,IAAI,EAAE;IAAa,CAAC,CAAC;IACnE,MAAMC,QAAQ,GAAGC,GAAG,CAACC,eAAe,CAACN,SAAS,CAAC;IAE/CjC,OAAO,CAACI,GAAG,CAAC,2BAA2B,CAAC;IACxC,OAAOiC,QAAQ;EACjB,CAAC,CAAC,OAAOd,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMiB,SAAS,GAAIH,QAAQ,IAAK;EACrC,IAAI,CAACA,QAAQ,EAAE;EAEf,MAAMI,KAAK,GAAG,IAAIC,KAAK,CAACL,QAAQ,CAAC;EACjCI,KAAK,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAACrB,KAAK,IAAI;IAC1BvB,OAAO,CAACuB,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;EAC/C,CAAC,CAAC;EAEF,OAAOkB,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMI,SAAS,GAAIJ,KAAK,IAAK;EAClC,IAAIA,KAAK,EAAE;IACTA,KAAK,CAACK,KAAK,CAAC,CAAC;IACbL,KAAK,CAACM,WAAW,GAAG,CAAC;EACvB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC5C,IAAI;IACF,IAAI,CAAC7D,kBAAkB,EAAE;MACvB,OAAO,EAAE;IACX;IAEA,MAAMuC,QAAQ,GAAG,MAAMjC,aAAa,CAACwD,GAAG,CAAC,SAAS,CAAC;IACnD,OAAOvB,QAAQ,CAACS,IAAI,CAACxB,MAAM;EAC7B,CAAC,CAAC,OAAOY,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAM2B,wBAAwB,GAAGA,CAAA,KAAM;EAC5C,IAAI,CAAC/D,kBAAkB,EAAE;IACvBa,OAAO,CAACC,IAAI,CAAC,0DAA0D,CAAC;IACxE,OAAO,KAAK;EACd;EACA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}