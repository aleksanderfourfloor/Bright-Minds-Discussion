{"ast":null,"code":"import axios from 'axios';\n\n// GMI Cloud API configuration\nconst GMI_API_URL = process.env.REACT_APP_GMI_API_URL || 'https://gmi.cloud';\nconst GMI_API_KEY = process.env.REACT_APP_GMI_API_KEY;\n\n// Try different possible GMI Cloud base URLs\nconst GMI_BASE_URLS = ['https://gmi.cloud', 'https://api.gmi.cloud', 'https://api.gmi.com', 'https://gmi.com'];\n\n// Debug environment variables\nconsole.log('Environment variables loaded:');\nconsole.log('GMI_API_URL:', GMI_API_URL);\nconsole.log('GMI_API_KEY exists:', !!GMI_API_KEY);\n\n// Speaker profiles with their characteristics and knowledge\nconst SPEAKER_PROFILES = {\n  'Steve Jobs': {\n    personality: 'Visionary, perfectionist, focused on design and user experience',\n    background: 'Co-founder of Apple, Pixar, and NeXT. Known for revolutionizing personal computing, mobile phones, and digital music.',\n    speaking_style: 'Direct, passionate, uses metaphors and stories. Emphasizes simplicity and elegance.',\n    expertise: 'Technology innovation, design philosophy, business strategy, creative leadership',\n    quotes: 'Stay hungry, stay foolish. Design is not just what it looks like and feels like. Design is how it works.',\n    knowledge_sources: 'Apple keynotes, interviews, Stanford commencement speech, biographies'\n  },\n  'Elon Musk': {\n    personality: 'Ambitious, risk-taking, focused on solving big problems',\n    background: 'CEO of Tesla and SpaceX, founder of Neuralink and The Boring Company. Known for electric vehicles, space exploration, and AI.',\n    speaking_style: 'Technical, direct, uses data and engineering principles. Often discusses future possibilities.',\n    expertise: 'Electric vehicles, space exploration, artificial intelligence, renewable energy, neural interfaces',\n    quotes: 'When something is important enough, you do it even if the odds are not in your favor. The future of humanity is going to be on multiple planets.',\n    knowledge_sources: 'Tesla presentations, SpaceX launches, interviews, Twitter posts, TED talks'\n  },\n  'Bill Gates': {\n    personality: 'Analytical, philanthropic, focused on global problems',\n    background: 'Co-founder of Microsoft, philanthropist through Bill & Melinda Gates Foundation. Known for personal computing and global health.',\n    speaking_style: 'Thoughtful, data-driven, uses statistics and research. Emphasizes global impact and innovation.',\n    expertise: 'Software development, global health, education, climate change, philanthropy',\n    quotes: 'Success is a lousy teacher. It seduces smart people into thinking they can\\'t lose. We always overestimate the change that will occur in the next two years and underestimate the change that will occur in the next ten.',\n    knowledge_sources: 'Microsoft presentations, Gates Notes, interviews, TED talks, annual letters'\n  },\n  'Warren Buffett': {\n    personality: 'Wise, patient, value-oriented, down-to-earth',\n    background: 'CEO of Berkshire Hathaway, known as the \"Oracle of Omaha\". One of the most successful investors ever.',\n    speaking_style: 'Simple, clear, uses analogies and stories. Emphasizes long-term thinking and value.',\n    expertise: 'Value investing, business analysis, economics, philanthropy, life philosophy',\n    quotes: 'Be fearful when others are greedy and greedy when others are fearful. Price is what you pay. Value is what you get.',\n    knowledge_sources: 'Berkshire annual meetings, interviews, shareholder letters, documentaries'\n  },\n  'Oprah Winfrey': {\n    personality: 'Empathetic, inspiring, focused on personal growth and human connection',\n    background: 'Media mogul, talk show host, philanthropist. Known for The Oprah Winfrey Show and OWN network.',\n    speaking_style: 'Warm, personal, uses stories and emotional connection. Emphasizes authenticity and purpose.',\n    expertise: 'Media, personal development, philanthropy, leadership, human psychology',\n    quotes: 'The biggest adventure you can take is to live the life of your dreams. What I know for sure is that speaking your truth is the most powerful tool we all have.',\n    knowledge_sources: 'The Oprah Winfrey Show, interviews, speeches, books, Super Soul Sunday'\n  },\n  'Albert Einstein': {\n    personality: 'Curious, revolutionary, focused on fundamental understanding',\n    background: 'Theoretical physicist, developed the theory of relativity. One of the most influential scientists ever.',\n    speaking_style: 'Philosophical, uses thought experiments and analogies. Emphasizes imagination and questioning.',\n    expertise: 'Physics, mathematics, philosophy of science, education, peace advocacy',\n    quotes: 'Imagination is more important than knowledge. The important thing is not to stop questioning. Curiosity has its own reason for existence.',\n    knowledge_sources: 'Scientific papers, interviews, letters, biographies, philosophical writings'\n  }\n};\n\n// Initialize axios instance for GMI Cloud\nconst gmiApi = axios.create({\n  baseURL: GMI_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${GMI_API_KEY}`\n  }\n});\n\n// Log the API configuration\nconsole.log('GMI API Configuration:', {\n  baseURL: GMI_API_URL,\n  hasApiKey: !!GMI_API_KEY,\n  apiKeyPrefix: GMI_API_KEY ? GMI_API_KEY.substring(0, 20) + '...' : 'None'\n});\n\n// Log environment variables directly\nconsole.log('Environment variables check:');\nconsole.log('process.env.REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\nconsole.log('process.env.REACT_APP_GMI_API_KEY exists:', !!process.env.REACT_APP_GMI_API_KEY);\n\n// Generate speaker-specific prompt\nconst generateSpeakerPrompt = (speaker, topic, conversationHistory = []) => {\n  const profile = SPEAKER_PROFILES[speaker];\n  if (!profile) {\n    throw new Error(`Speaker profile not found for: ${speaker}`);\n  }\n  const historyContext = conversationHistory.length > 0 ? `\\n\\nPrevious conversation context:\\n${conversationHistory.map(msg => `${msg.speaker}: ${msg.content}`).join('\\n')}` : '';\n  return `You are ${speaker}, having a natural conversation about \"${topic}\".\n\n${speaker}'s characteristics:\n- Personality: ${profile.personality}\n- Background: ${profile.background}\n- Speaking style: ${profile.speaking_style}\n- Expertise: ${profile.expertise}\n- Famous quotes: ${profile.quotes}\n\nInstructions:\n1. Respond as ${speaker} would naturally speak about this topic\n2. Keep responses concise (2-5 sentences, average 2-3 sentences)\n3. Reference your background, expertise, and speaking style\n4. Respond to what the other speaker just said, creating a natural flow\n5. Stay focused on the topic: ${topic}\n6. Use your characteristic speaking style and personality\n7. Don't break character or mention that you're an AI\n\n${historyContext}\n\nRespond as ${speaker} would naturally continue this conversation:`;\n};\n\n// Generate user question prompt\nconst generateUserQuestionPrompt = (speaker1, speaker2, topic, userQuestion, conversationHistory = []) => {\n  const profile1 = SPEAKER_PROFILES[speaker1];\n  const profile2 = SPEAKER_PROFILES[speaker2];\n  const historyContext = conversationHistory.length > 0 ? `\\n\\nPrevious conversation:\\n${conversationHistory.map(msg => `${msg.speaker}: ${msg.content}`).join('\\n')}` : '';\n  return `You are ${speaker1} and ${speaker2} having a discussion about \"${topic}\".\n\n${speaker1}'s characteristics:\n- Personality: ${profile1.personality}\n- Background: ${profile1.background}\n- Speaking style: ${profile1.speaking_style}\n\n${speaker2}'s characteristics:\n- Personality: ${profile2.personality}\n- Background: ${profile2.background}\n- Speaking style: ${profile2.speaking_style}\n\nA member of the audience has asked: \"${userQuestion}\"\n\nInstructions:\n1. Both speakers should respond to this audience question\n2. Keep responses concise (2-5 sentences each)\n3. Respond in character as each speaker would naturally\n4. Reference their background and expertise\n5. Stay focused on the topic and the specific question\n6. Use their characteristic speaking styles\n\n${historyContext}\n\nProvide responses from both ${speaker1} and ${speaker2} to the audience question:`;\n};\n\n// Call GMI Cloud API for conversation generation\nexport const generateConversation = async (speaker1, speaker2, topic, conversationHistory = []) => {\n  try {\n    console.log('Generating conversation for:', speaker1, 'about topic:', topic);\n    const prompt = generateSpeakerPrompt(speaker1, topic, conversationHistory);\n    console.log('Making API request to GMI Cloud...');\n    console.log('Using URL:', gmiApi.defaults.baseURL);\n\n    // Try different request formats for GMI Cloud\n    const requestPayloads = [{\n      model: 'moonshotai: Kimi-K2-Instruct',\n      messages: [{\n        role: 'system',\n        content: 'You are an AI assistant that helps simulate conversations between influential leaders. Respond naturally and in character.'\n      }, {\n        role: 'user',\n        content: prompt\n      }],\n      max_tokens: 150,\n      temperature: 0.8,\n      top_p: 0.9\n    }, {\n      model: 'moonshotai: Kimi-K2-Instruct',\n      prompt: prompt,\n      max_tokens: 150,\n      temperature: 0.8\n    }, {\n      model: 'moonshotai: Kimi-K2-Instruct',\n      input: prompt,\n      max_tokens: 150,\n      temperature: 0.8\n    }];\n    for (let i = 0; i < requestPayloads.length; i++) {\n      try {\n        var _response$data$choice, _response$data$choice2, _response$data$choice3, _response$data$choice4, _response$data$text, _response$data$respon;\n        console.log(`Trying request format ${i + 1}:`, requestPayloads[i]);\n        const response = await gmiApi.post('/v1/chat/completions', requestPayloads[i]);\n        console.log('API response received:', response.data);\n        return ((_response$data$choice = response.data.choices) === null || _response$data$choice === void 0 ? void 0 : (_response$data$choice2 = _response$data$choice[0]) === null || _response$data$choice2 === void 0 ? void 0 : (_response$data$choice3 = _response$data$choice2.message) === null || _response$data$choice3 === void 0 ? void 0 : (_response$data$choice4 = _response$data$choice3.content) === null || _response$data$choice4 === void 0 ? void 0 : _response$data$choice4.trim()) || ((_response$data$text = response.data.text) === null || _response$data$text === void 0 ? void 0 : _response$data$text.trim()) || ((_response$data$respon = response.data.response) === null || _response$data$respon === void 0 ? void 0 : _response$data$respon.trim()) || 'I understand your point.';\n      } catch (formatError) {\n        console.log(`Request format ${i + 1} failed:`, formatError.message);\n        if (i === requestPayloads.length - 1) {\n          throw formatError;\n        }\n        continue;\n      }\n    }\n  } catch (error) {\n    var _error$response;\n    console.error('Error generating conversation:', error);\n    console.error('Error details:', ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    throw new Error(`Failed to generate conversation response: ${error.message}`);\n  }\n};\n\n// Generate responses to user questions\nexport const generateUserQuestionResponse = async (speaker1, speaker2, topic, userQuestion, conversationHistory = []) => {\n  try {\n    var _lines$find, _lines$find2;\n    const prompt = generateUserQuestionPrompt(speaker1, speaker2, topic, userQuestion, conversationHistory);\n    const response = await gmiApi.post('/v1/chat/completions', {\n      model: 'moonshotai: Kimi-K2-Instruct',\n      messages: [{\n        role: 'system',\n        content: 'You are an AI assistant that helps simulate conversations between influential leaders. Provide responses from both speakers to audience questions.'\n      }, {\n        role: 'user',\n        content: prompt\n      }],\n      max_tokens: 300,\n      temperature: 0.8,\n      top_p: 0.9\n    });\n    const fullResponse = response.data.choices[0].message.content.trim();\n\n    // Parse the response to separate the two speakers\n    const lines = fullResponse.split('\\n');\n    const speaker1Response = (_lines$find = lines.find(line => line.includes(speaker1 + ':'))) === null || _lines$find === void 0 ? void 0 : _lines$find.replace(speaker1 + ':', '').trim();\n    const speaker2Response = (_lines$find2 = lines.find(line => line.includes(speaker2 + ':'))) === null || _lines$find2 === void 0 ? void 0 : _lines$find2.replace(speaker2 + ':', '').trim();\n    return {\n      speaker1: speaker1Response || 'I appreciate that question.',\n      speaker2: speaker2Response || 'That\\'s an interesting point.'\n    };\n  } catch (error) {\n    console.error('Error generating user question response:', error);\n    throw new Error('Failed to generate response to user question');\n  }\n};\n\n// Get available speakers\nexport const getAvailableSpeakers = () => {\n  return Object.keys(SPEAKER_PROFILES);\n};\n\n// Validate GMI API configuration\nexport const validateGMIConfig = () => {\n  if (!GMI_API_KEY) {\n    throw new Error('GMI API key is not configured. Please set REACT_APP_GMI_API_KEY environment variable.');\n  }\n  console.log('GMI API Key configured:', GMI_API_KEY ? 'Yes' : 'No');\n  console.log('GMI API URL:', GMI_API_URL);\n  return true;\n};\n\n// Test GMI API connection\nexport const testGMIConnection = async () => {\n  try {\n    console.log('Testing GMI API connection...');\n\n    // Try different possible endpoints for GMI Cloud\n    const endpoints = ['/v1/chat/completions', '/chat/completions', '/api/v1/chat/completions', '/completions', '/api/chat/completions', '/v1/completions'];\n\n    // Try different base URLs and endpoints\n    for (const baseUrl of GMI_BASE_URLS) {\n      console.log(`Trying base URL: ${baseUrl}`);\n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying endpoint: ${baseUrl}${endpoint}`);\n\n          // Create a temporary axios instance for this base URL\n          const tempApi = axios.create({\n            baseURL: baseUrl,\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${GMI_API_KEY}`\n            }\n          });\n          const response = await tempApi.post(endpoint, {\n            model: 'moonshotai: Kimi-K2-Instruct',\n            messages: [{\n              role: 'user',\n              content: 'Hello, this is a test message.'\n            }],\n            max_tokens: 10\n          });\n          console.log(`GMI API test successful with ${baseUrl}${endpoint}:`, response.data);\n          return true;\n        } catch (endpointError) {\n          console.log(`Endpoint ${baseUrl}${endpoint} failed:`, endpointError.message);\n          continue;\n        }\n      }\n    }\n    console.error('All GMI API endpoints failed');\n    return false;\n  } catch (error) {\n    var _error$response2;\n    console.error('GMI API test failed:', error);\n    console.error('Error details:', ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n    return false;\n  }\n};","map":{"version":3,"names":["axios","GMI_API_URL","process","env","REACT_APP_GMI_API_URL","GMI_API_KEY","REACT_APP_GMI_API_KEY","GMI_BASE_URLS","console","log","SPEAKER_PROFILES","personality","background","speaking_style","expertise","quotes","knowledge_sources","gmiApi","create","baseURL","headers","hasApiKey","apiKeyPrefix","substring","generateSpeakerPrompt","speaker","topic","conversationHistory","profile","Error","historyContext","length","map","msg","content","join","generateUserQuestionPrompt","speaker1","speaker2","userQuestion","profile1","profile2","generateConversation","prompt","defaults","requestPayloads","model","messages","role","max_tokens","temperature","top_p","input","i","_response$data$choice","_response$data$choice2","_response$data$choice3","_response$data$choice4","_response$data$text","_response$data$respon","response","post","data","choices","message","trim","text","formatError","error","_error$response","generateUserQuestionResponse","_lines$find","_lines$find2","fullResponse","lines","split","speaker1Response","find","line","includes","replace","speaker2Response","getAvailableSpeakers","Object","keys","validateGMIConfig","testGMIConnection","endpoints","baseUrl","endpoint","tempApi","endpointError","_error$response2"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/services/gmiService.js"],"sourcesContent":["import axios from 'axios';\n\n// GMI Cloud API configuration\nconst GMI_API_URL = process.env.REACT_APP_GMI_API_URL || 'https://gmi.cloud';\nconst GMI_API_KEY = process.env.REACT_APP_GMI_API_KEY;\n\n// Try different possible GMI Cloud base URLs\nconst GMI_BASE_URLS = [\n  'https://gmi.cloud',\n  'https://api.gmi.cloud',\n  'https://api.gmi.com',\n  'https://gmi.com'\n];\n\n// Debug environment variables\nconsole.log('Environment variables loaded:');\nconsole.log('GMI_API_URL:', GMI_API_URL);\nconsole.log('GMI_API_KEY exists:', !!GMI_API_KEY);\n\n// Speaker profiles with their characteristics and knowledge\nconst SPEAKER_PROFILES = {\n  'Steve Jobs': {\n    personality: 'Visionary, perfectionist, focused on design and user experience',\n    background: 'Co-founder of Apple, Pixar, and NeXT. Known for revolutionizing personal computing, mobile phones, and digital music.',\n    speaking_style: 'Direct, passionate, uses metaphors and stories. Emphasizes simplicity and elegance.',\n    expertise: 'Technology innovation, design philosophy, business strategy, creative leadership',\n    quotes: 'Stay hungry, stay foolish. Design is not just what it looks like and feels like. Design is how it works.',\n    knowledge_sources: 'Apple keynotes, interviews, Stanford commencement speech, biographies'\n  },\n  'Elon Musk': {\n    personality: 'Ambitious, risk-taking, focused on solving big problems',\n    background: 'CEO of Tesla and SpaceX, founder of Neuralink and The Boring Company. Known for electric vehicles, space exploration, and AI.',\n    speaking_style: 'Technical, direct, uses data and engineering principles. Often discusses future possibilities.',\n    expertise: 'Electric vehicles, space exploration, artificial intelligence, renewable energy, neural interfaces',\n    quotes: 'When something is important enough, you do it even if the odds are not in your favor. The future of humanity is going to be on multiple planets.',\n    knowledge_sources: 'Tesla presentations, SpaceX launches, interviews, Twitter posts, TED talks'\n  },\n  'Bill Gates': {\n    personality: 'Analytical, philanthropic, focused on global problems',\n    background: 'Co-founder of Microsoft, philanthropist through Bill & Melinda Gates Foundation. Known for personal computing and global health.',\n    speaking_style: 'Thoughtful, data-driven, uses statistics and research. Emphasizes global impact and innovation.',\n    expertise: 'Software development, global health, education, climate change, philanthropy',\n    quotes: 'Success is a lousy teacher. It seduces smart people into thinking they can\\'t lose. We always overestimate the change that will occur in the next two years and underestimate the change that will occur in the next ten.',\n    knowledge_sources: 'Microsoft presentations, Gates Notes, interviews, TED talks, annual letters'\n  },\n  'Warren Buffett': {\n    personality: 'Wise, patient, value-oriented, down-to-earth',\n    background: 'CEO of Berkshire Hathaway, known as the \"Oracle of Omaha\". One of the most successful investors ever.',\n    speaking_style: 'Simple, clear, uses analogies and stories. Emphasizes long-term thinking and value.',\n    expertise: 'Value investing, business analysis, economics, philanthropy, life philosophy',\n    quotes: 'Be fearful when others are greedy and greedy when others are fearful. Price is what you pay. Value is what you get.',\n    knowledge_sources: 'Berkshire annual meetings, interviews, shareholder letters, documentaries'\n  },\n  'Oprah Winfrey': {\n    personality: 'Empathetic, inspiring, focused on personal growth and human connection',\n    background: 'Media mogul, talk show host, philanthropist. Known for The Oprah Winfrey Show and OWN network.',\n    speaking_style: 'Warm, personal, uses stories and emotional connection. Emphasizes authenticity and purpose.',\n    expertise: 'Media, personal development, philanthropy, leadership, human psychology',\n    quotes: 'The biggest adventure you can take is to live the life of your dreams. What I know for sure is that speaking your truth is the most powerful tool we all have.',\n    knowledge_sources: 'The Oprah Winfrey Show, interviews, speeches, books, Super Soul Sunday'\n  },\n  'Albert Einstein': {\n    personality: 'Curious, revolutionary, focused on fundamental understanding',\n    background: 'Theoretical physicist, developed the theory of relativity. One of the most influential scientists ever.',\n    speaking_style: 'Philosophical, uses thought experiments and analogies. Emphasizes imagination and questioning.',\n    expertise: 'Physics, mathematics, philosophy of science, education, peace advocacy',\n    quotes: 'Imagination is more important than knowledge. The important thing is not to stop questioning. Curiosity has its own reason for existence.',\n    knowledge_sources: 'Scientific papers, interviews, letters, biographies, philosophical writings'\n  }\n};\n\n// Initialize axios instance for GMI Cloud\nconst gmiApi = axios.create({\n  baseURL: GMI_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${GMI_API_KEY}`\n  }\n});\n\n// Log the API configuration\nconsole.log('GMI API Configuration:', {\n  baseURL: GMI_API_URL,\n  hasApiKey: !!GMI_API_KEY,\n  apiKeyPrefix: GMI_API_KEY ? GMI_API_KEY.substring(0, 20) + '...' : 'None'\n});\n\n// Log environment variables directly\nconsole.log('Environment variables check:');\nconsole.log('process.env.REACT_APP_GMI_API_URL:', process.env.REACT_APP_GMI_API_URL);\nconsole.log('process.env.REACT_APP_GMI_API_KEY exists:', !!process.env.REACT_APP_GMI_API_KEY);\n\n// Generate speaker-specific prompt\nconst generateSpeakerPrompt = (speaker, topic, conversationHistory = []) => {\n  const profile = SPEAKER_PROFILES[speaker];\n  if (!profile) {\n    throw new Error(`Speaker profile not found for: ${speaker}`);\n  }\n\n  const historyContext = conversationHistory.length > 0 \n    ? `\\n\\nPrevious conversation context:\\n${conversationHistory.map(msg => `${msg.speaker}: ${msg.content}`).join('\\n')}`\n    : '';\n\n  return `You are ${speaker}, having a natural conversation about \"${topic}\".\n\n${speaker}'s characteristics:\n- Personality: ${profile.personality}\n- Background: ${profile.background}\n- Speaking style: ${profile.speaking_style}\n- Expertise: ${profile.expertise}\n- Famous quotes: ${profile.quotes}\n\nInstructions:\n1. Respond as ${speaker} would naturally speak about this topic\n2. Keep responses concise (2-5 sentences, average 2-3 sentences)\n3. Reference your background, expertise, and speaking style\n4. Respond to what the other speaker just said, creating a natural flow\n5. Stay focused on the topic: ${topic}\n6. Use your characteristic speaking style and personality\n7. Don't break character or mention that you're an AI\n\n${historyContext}\n\nRespond as ${speaker} would naturally continue this conversation:`;\n};\n\n// Generate user question prompt\nconst generateUserQuestionPrompt = (speaker1, speaker2, topic, userQuestion, conversationHistory = []) => {\n  const profile1 = SPEAKER_PROFILES[speaker1];\n  const profile2 = SPEAKER_PROFILES[speaker2];\n\n  const historyContext = conversationHistory.length > 0 \n    ? `\\n\\nPrevious conversation:\\n${conversationHistory.map(msg => `${msg.speaker}: ${msg.content}`).join('\\n')}`\n    : '';\n\n  return `You are ${speaker1} and ${speaker2} having a discussion about \"${topic}\".\n\n${speaker1}'s characteristics:\n- Personality: ${profile1.personality}\n- Background: ${profile1.background}\n- Speaking style: ${profile1.speaking_style}\n\n${speaker2}'s characteristics:\n- Personality: ${profile2.personality}\n- Background: ${profile2.background}\n- Speaking style: ${profile2.speaking_style}\n\nA member of the audience has asked: \"${userQuestion}\"\n\nInstructions:\n1. Both speakers should respond to this audience question\n2. Keep responses concise (2-5 sentences each)\n3. Respond in character as each speaker would naturally\n4. Reference their background and expertise\n5. Stay focused on the topic and the specific question\n6. Use their characteristic speaking styles\n\n${historyContext}\n\nProvide responses from both ${speaker1} and ${speaker2} to the audience question:`;\n};\n\n// Call GMI Cloud API for conversation generation\nexport const generateConversation = async (speaker1, speaker2, topic, conversationHistory = []) => {\n  try {\n    console.log('Generating conversation for:', speaker1, 'about topic:', topic);\n    const prompt = generateSpeakerPrompt(speaker1, topic, conversationHistory);\n    \n    console.log('Making API request to GMI Cloud...');\n    console.log('Using URL:', gmiApi.defaults.baseURL);\n    \n    // Try different request formats for GMI Cloud\n    const requestPayloads = [\n      {\n        model: 'moonshotai: Kimi-K2-Instruct',\n        messages: [\n          {\n            role: 'system',\n            content: 'You are an AI assistant that helps simulate conversations between influential leaders. Respond naturally and in character.'\n          },\n          {\n            role: 'user',\n            content: prompt\n          }\n        ],\n        max_tokens: 150,\n        temperature: 0.8,\n        top_p: 0.9\n      },\n      {\n        model: 'moonshotai: Kimi-K2-Instruct',\n        prompt: prompt,\n        max_tokens: 150,\n        temperature: 0.8\n      },\n      {\n        model: 'moonshotai: Kimi-K2-Instruct',\n        input: prompt,\n        max_tokens: 150,\n        temperature: 0.8\n      }\n    ];\n    \n    for (let i = 0; i < requestPayloads.length; i++) {\n      try {\n        console.log(`Trying request format ${i + 1}:`, requestPayloads[i]);\n        const response = await gmiApi.post('/v1/chat/completions', requestPayloads[i]);\n        console.log('API response received:', response.data);\n        return response.data.choices?.[0]?.message?.content?.trim() || \n               response.data.text?.trim() || \n               response.data.response?.trim() || \n               'I understand your point.';\n      } catch (formatError) {\n        console.log(`Request format ${i + 1} failed:`, formatError.message);\n        if (i === requestPayloads.length - 1) {\n          throw formatError;\n        }\n        continue;\n      }\n    }\n  } catch (error) {\n    console.error('Error generating conversation:', error);\n    console.error('Error details:', error.response?.data || error.message);\n    throw new Error(`Failed to generate conversation response: ${error.message}`);\n  }\n};\n\n// Generate responses to user questions\nexport const generateUserQuestionResponse = async (speaker1, speaker2, topic, userQuestion, conversationHistory = []) => {\n  try {\n    const prompt = generateUserQuestionPrompt(speaker1, speaker2, topic, userQuestion, conversationHistory);\n    \n    const response = await gmiApi.post('/v1/chat/completions', {\n      model: 'moonshotai: Kimi-K2-Instruct',\n      messages: [\n        {\n          role: 'system',\n          content: 'You are an AI assistant that helps simulate conversations between influential leaders. Provide responses from both speakers to audience questions.'\n        },\n        {\n          role: 'user',\n          content: prompt\n        }\n      ],\n      max_tokens: 300,\n      temperature: 0.8,\n      top_p: 0.9\n    });\n\n    const fullResponse = response.data.choices[0].message.content.trim();\n    \n    // Parse the response to separate the two speakers\n    const lines = fullResponse.split('\\n');\n    const speaker1Response = lines.find(line => line.includes(speaker1 + ':'))?.replace(speaker1 + ':', '').trim();\n    const speaker2Response = lines.find(line => line.includes(speaker2 + ':'))?.replace(speaker2 + ':', '').trim();\n\n    return {\n      speaker1: speaker1Response || 'I appreciate that question.',\n      speaker2: speaker2Response || 'That\\'s an interesting point.'\n    };\n  } catch (error) {\n    console.error('Error generating user question response:', error);\n    throw new Error('Failed to generate response to user question');\n  }\n};\n\n// Get available speakers\nexport const getAvailableSpeakers = () => {\n  return Object.keys(SPEAKER_PROFILES);\n};\n\n// Validate GMI API configuration\nexport const validateGMIConfig = () => {\n  if (!GMI_API_KEY) {\n    throw new Error('GMI API key is not configured. Please set REACT_APP_GMI_API_KEY environment variable.');\n  }\n  console.log('GMI API Key configured:', GMI_API_KEY ? 'Yes' : 'No');\n  console.log('GMI API URL:', GMI_API_URL);\n  return true;\n};\n\n// Test GMI API connection\nexport const testGMIConnection = async () => {\n  try {\n    console.log('Testing GMI API connection...');\n    \n    // Try different possible endpoints for GMI Cloud\n    const endpoints = [\n      '/v1/chat/completions',\n      '/chat/completions',\n      '/api/v1/chat/completions',\n      '/completions',\n      '/api/chat/completions',\n      '/v1/completions'\n    ];\n    \n    // Try different base URLs and endpoints\n    for (const baseUrl of GMI_BASE_URLS) {\n      console.log(`Trying base URL: ${baseUrl}`);\n      \n      for (const endpoint of endpoints) {\n        try {\n          console.log(`Trying endpoint: ${baseUrl}${endpoint}`);\n          \n          // Create a temporary axios instance for this base URL\n          const tempApi = axios.create({\n            baseURL: baseUrl,\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${GMI_API_KEY}`\n            }\n          });\n          \n          const response = await tempApi.post(endpoint, {\n            model: 'moonshotai: Kimi-K2-Instruct',\n            messages: [\n              {\n                role: 'user',\n                content: 'Hello, this is a test message.'\n              }\n            ],\n            max_tokens: 10\n          });\n          \n          console.log(`GMI API test successful with ${baseUrl}${endpoint}:`, response.data);\n          return true;\n        } catch (endpointError) {\n          console.log(`Endpoint ${baseUrl}${endpoint} failed:`, endpointError.message);\n          continue;\n        }\n      }\n    }\n    \n    console.error('All GMI API endpoints failed');\n    return false;\n  } catch (error) {\n    console.error('GMI API test failed:', error);\n    console.error('Error details:', error.response?.data || error.message);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}