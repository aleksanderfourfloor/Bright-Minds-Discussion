{"ast":null,"code":"import axios from 'axios';\n\n// ElevenLabs API configuration\nconst ELEVENLABS_API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\n\n// Voice IDs for different speakers (you can customize these)\nconst VOICE_IDS = {\n  'Steve Jobs': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (confident, clear)\n  'Elon Musk': 'VR6AewLTigWG4xSOukaG',\n  // Arnold voice (deep, authoritative)\n  'Bill Gates': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (analytical)\n  'Warren Buffett': 'VR6AewLTigWG4xSOukaG',\n  // Arnold voice (wise, measured)\n  'Oprah Winfrey': 'pNInz6obpgDQGcFmaJgB',\n  // Adam voice (warm, empathetic)\n  'Albert Einstein': 'VR6AewLTigWG4xSOukaG' // Arnold voice (thoughtful)\n};\n\n// Initialize ElevenLabs API\nconst elevenLabsApi = axios.create({\n  baseURL: ELEVENLABS_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'xi-api-key': ELEVENLABS_API_KEY\n  }\n});\n\n// Convert text to speech\nexport const textToSpeech = async (text, speaker) => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      console.warn('ElevenLabs API key not configured. Using browser TTS as fallback.');\n\n      // Use browser's built-in speech synthesis as fallback\n      return new Promise(resolve => {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.0;\n        utterance.volume = 0.8;\n\n        // Set different voices for different speakers\n        const voices = speechSynthesis.getVoices();\n        if (voices.length > 0) {\n          // Use different voices based on speaker\n          const voiceIndex = speaker === 'Elon Musk' ? 1 : 0;\n          utterance.voice = voices[voiceIndex % voices.length];\n        }\n        utterance.onend = () => {\n          console.log('Browser TTS finished');\n          resolve(null); // Return null since we can't create a URL for browser TTS\n        };\n        utterance.onerror = () => {\n          console.log('Browser TTS failed');\n          resolve(null);\n        };\n        speechSynthesis.speak(utterance);\n        resolve(null); // Return null for browser TTS\n      });\n    }\n    const voiceId = VOICE_IDS[speaker] || VOICE_IDS['Steve Jobs']; // Default fallback\n\n    console.log(`Converting text to speech for ${speaker} using voice ${voiceId}`);\n    const response = await elevenLabsApi.post(`/text-to-speech/${voiceId}`, {\n      text: text,\n      model_id: 'eleven_monolingual_v1',\n      voice_settings: {\n        stability: 0.5,\n        similarity_boost: 0.5\n      }\n    }, {\n      responseType: 'blob'\n    });\n\n    // Create audio blob and URL\n    const audioBlob = new Blob([response.data], {\n      type: 'audio/mpeg'\n    });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    console.log('TTS conversion successful');\n    return audioUrl;\n  } catch (error) {\n    console.error('TTS conversion failed:', error);\n    return null;\n  }\n};\n\n// Play audio\nexport const playAudio = audioUrl => {\n  if (!audioUrl) return;\n  const audio = new Audio(audioUrl);\n  audio.play().catch(error => {\n    console.error('Failed to play audio:', error);\n  });\n  return audio;\n};\n\n// Stop audio\nexport const stopAudio = audio => {\n  if (audio) {\n    audio.pause();\n    audio.currentTime = 0;\n  }\n};\n\n// Get available voices from ElevenLabs\nexport const getAvailableVoices = async () => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      return [];\n    }\n    const response = await elevenLabsApi.get('/voices');\n    return response.data.voices;\n  } catch (error) {\n    console.error('Failed to get available voices:', error);\n    return [];\n  }\n};\n\n// Validate ElevenLabs configuration\nexport const validateElevenLabsConfig = () => {\n  if (!ELEVENLABS_API_KEY) {\n    console.warn('ElevenLabs API key not configured. TTS will be disabled.');\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["axios","ELEVENLABS_API_KEY","process","env","REACT_APP_ELEVENLABS_API_KEY","ELEVENLABS_API_URL","VOICE_IDS","elevenLabsApi","create","baseURL","headers","textToSpeech","text","speaker","console","warn","Promise","resolve","utterance","SpeechSynthesisUtterance","rate","pitch","volume","voices","speechSynthesis","getVoices","length","voiceIndex","voice","onend","log","onerror","speak","voiceId","response","post","model_id","voice_settings","stability","similarity_boost","responseType","audioBlob","Blob","data","type","audioUrl","URL","createObjectURL","error","playAudio","audio","Audio","play","catch","stopAudio","pause","currentTime","getAvailableVoices","get","validateElevenLabsConfig"],"sources":["/Users/aleksander/Documents/Development/GMIxc/src/services/ttsService.js"],"sourcesContent":["import axios from 'axios';\n\n// ElevenLabs API configuration\nconst ELEVENLABS_API_KEY = process.env.REACT_APP_ELEVENLABS_API_KEY;\nconst ELEVENLABS_API_URL = 'https://api.elevenlabs.io/v1';\n\n// Voice IDs for different speakers (you can customize these)\nconst VOICE_IDS = {\n  'Steve Jobs': 'pNInz6obpgDQGcFmaJgB', // Adam voice (confident, clear)\n  'Elon Musk': 'VR6AewLTigWG4xSOukaG', // Arnold voice (deep, authoritative)\n  'Bill Gates': 'pNInz6obpgDQGcFmaJgB', // Adam voice (analytical)\n  'Warren Buffett': 'VR6AewLTigWG4xSOukaG', // Arnold voice (wise, measured)\n  'Oprah Winfrey': 'pNInz6obpgDQGcFmaJgB', // Adam voice (warm, empathetic)\n  'Albert Einstein': 'VR6AewLTigWG4xSOukaG' // Arnold voice (thoughtful)\n};\n\n// Initialize ElevenLabs API\nconst elevenLabsApi = axios.create({\n  baseURL: ELEVENLABS_API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    'xi-api-key': ELEVENLABS_API_KEY\n  }\n});\n\n// Convert text to speech\nexport const textToSpeech = async (text, speaker) => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      console.warn('ElevenLabs API key not configured. Using browser TTS as fallback.');\n      \n      // Use browser's built-in speech synthesis as fallback\n      return new Promise((resolve) => {\n        const utterance = new SpeechSynthesisUtterance(text);\n        utterance.rate = 0.9;\n        utterance.pitch = 1.0;\n        utterance.volume = 0.8;\n        \n        // Set different voices for different speakers\n        const voices = speechSynthesis.getVoices();\n        if (voices.length > 0) {\n          // Use different voices based on speaker\n          const voiceIndex = speaker === 'Elon Musk' ? 1 : 0;\n          utterance.voice = voices[voiceIndex % voices.length];\n        }\n        \n        utterance.onend = () => {\n          console.log('Browser TTS finished');\n          resolve(null); // Return null since we can't create a URL for browser TTS\n        };\n        \n        utterance.onerror = () => {\n          console.log('Browser TTS failed');\n          resolve(null);\n        };\n        \n        speechSynthesis.speak(utterance);\n        resolve(null); // Return null for browser TTS\n      });\n    }\n\n    const voiceId = VOICE_IDS[speaker] || VOICE_IDS['Steve Jobs']; // Default fallback\n    \n    console.log(`Converting text to speech for ${speaker} using voice ${voiceId}`);\n    \n    const response = await elevenLabsApi.post(`/text-to-speech/${voiceId}`, {\n      text: text,\n      model_id: 'eleven_monolingual_v1',\n      voice_settings: {\n        stability: 0.5,\n        similarity_boost: 0.5\n      }\n    }, {\n      responseType: 'blob'\n    });\n\n    // Create audio blob and URL\n    const audioBlob = new Blob([response.data], { type: 'audio/mpeg' });\n    const audioUrl = URL.createObjectURL(audioBlob);\n    \n    console.log('TTS conversion successful');\n    return audioUrl;\n  } catch (error) {\n    console.error('TTS conversion failed:', error);\n    return null;\n  }\n};\n\n// Play audio\nexport const playAudio = (audioUrl) => {\n  if (!audioUrl) return;\n  \n  const audio = new Audio(audioUrl);\n  audio.play().catch(error => {\n    console.error('Failed to play audio:', error);\n  });\n  \n  return audio;\n};\n\n// Stop audio\nexport const stopAudio = (audio) => {\n  if (audio) {\n    audio.pause();\n    audio.currentTime = 0;\n  }\n};\n\n// Get available voices from ElevenLabs\nexport const getAvailableVoices = async () => {\n  try {\n    if (!ELEVENLABS_API_KEY) {\n      return [];\n    }\n    \n    const response = await elevenLabsApi.get('/voices');\n    return response.data.voices;\n  } catch (error) {\n    console.error('Failed to get available voices:', error);\n    return [];\n  }\n};\n\n// Validate ElevenLabs configuration\nexport const validateElevenLabsConfig = () => {\n  if (!ELEVENLABS_API_KEY) {\n    console.warn('ElevenLabs API key not configured. TTS will be disabled.');\n    return false;\n  }\n  return true;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}